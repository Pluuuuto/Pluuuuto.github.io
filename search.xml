<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>2025软件系统安全赛-donntyousee</title>
      <link href="/2025/01/10/2025%E8%BD%AF%E4%BB%B6%E7%B3%BB%E7%BB%9F%E5%AE%89%E5%85%A8%E8%B5%9B-donntyousee/"/>
      <url>/2025/01/10/2025%E8%BD%AF%E4%BB%B6%E7%B3%BB%E7%BB%9F%E5%AE%89%E5%85%A8%E8%B5%9B-donntyousee/</url>
      
        <content type="html"><![CDATA[<h1 id="donntyousee">donntyousee</h1><h2 id="初看">初看</h2><p>比赛的时候没有细看，就简单调了一会，没找到输入的地方，觉得有点奇怪，就去看另一道happylock 了（虽然也没写出来</p><h2 id="初步处理">初步处理</h2><p>在<code>start</code>函数中的<code>sub_405559</code>里可以看到有异常</p><figure><img src="image-20250108191600363.png" alt="image-20250108191600363" /><figcaption aria-hidden="true">image-20250108191600363</figcaption></figure><figure><img src="image-20250108194703557.png" alt="image-20250108194703557" /><figcaption aria-hidden="true">image-20250108194703557</figcaption></figure><p>汇编视图往上看有个莫名其妙的<code>retn</code></p><figure><img src="image-20250108194754301.png" alt="image-20250108194754301" /><figcaption aria-hidden="true">image-20250108194754301</figcaption></figure><p>nop 掉即可反汇编</p><figure><img src="image-20250108194819599.png" alt="image-20250108194819599" /><figcaption aria-hidden="true">image-20250108194819599</figcaption></figure><p>输入函数即<code>sub_4D9660</code>，<code>unk_56602C</code>即为<code>%s</code></p><figure><img src="image-20250108222936992.png" alt="image-20250108222936992" /><figcaption aria-hidden="true">image-20250108222936992</figcaption></figure><p>同时在<code>unk_56602C</code>下方看到<code>rc4</code>字样，猜测可能是<code>RC4</code>加密</p><figure><img src="image-20250108223044499.png" alt="image-20250108223044499" /><figcaption aria-hidden="true">image-20250108223044499</figcaption></figure><p>但是我们并没有在<code>sub_4D9660</code>的伪代码中看到调用<code>RC4</code>加密以及<code>flag</code>验证的相关函数，于是回到汇编视图，发现有<code>call r8</code>语句，动调看一下<code>call r8</code>是调用了哪个函数</p><figure><img src="image-20250110130021262.png" alt="image-20250110130021262" /><figcaption aria-hidden="true">image-20250110130021262</figcaption></figure><p>可以看到第一条<code>call r8</code>调用的是<code>sub_405848</code>函数</p><figure><img src="image-20250110130357037.png" alt="image-20250110130357037" /><figcaption aria-hidden="true">image-20250110130357037</figcaption></figure><p>第二条<code>call r8</code>调用的是<code>sub_405EAA</code>函数</p><figure><img src="image-20250110130456097.png" alt="image-20250110130456097" /><figcaption aria-hidden="true">image-20250110130456097</figcaption></figure><p>同样，这两个函数里也有<code>retn</code>花指令，去除即可反汇编</p><figure><img src="image-20250110125326424.png" alt="image-20250110125326424" /><figcaption aria-hidden="true">image-20250110125326424</figcaption></figure><figure><img src="image-20250110130841965.png" alt="image-20250110130841965" /><figcaption aria-hidden="true">image-20250110130841965</figcaption></figure><p><code>sub_405848</code>函数是<code>RC4</code>的密钥初始化（KSA）阶段</p><figure><img src="image-20250110130705586.png" alt="image-20250110130705586" /><figcaption aria-hidden="true">image-20250110130705586</figcaption></figure><p><code>sub_405EAA</code>函数是加密（PRGA）阶段，注意有个魔改，最后异或了<code>0x23</code></p><figure><img src="image-20250110130854613.png" alt="image-20250110130854613" /><figcaption aria-hidden="true">image-20250110130854613</figcaption></figure><p>伪代码中可以看到都是临时变量，于是密钥和密文需要动调 dump 出来</p><p><code>sub_405848</code>函数中，参数<code>a3</code>就是密钥数组，<code>a4</code>为密钥长度</p><figure><img src="image-20250110135357841.png" alt="image-20250110135357841" /><figcaption aria-hidden="true">image-20250110135357841</figcaption></figure><figure><img src="image-20250110135530715.png" alt="image-20250110135530715" /><figcaption aria-hidden="true">image-20250110135530715</figcaption></figure><p><code>sub_405EAA</code>函数中参数<code>a3</code>是输入的<code>flag</code>，<code>a2</code>是KSA 生成的密钥流，<code>a4</code>是密文长度</p><p>同时注意到，输入的<code>flag</code>存放的位置是<code>bss</code>段，未初始化的全局变量，起始地址为<code>0x5C6CC0</code></p><figure><img src="image-20250110135901377.png" alt="image-20250110135901377" /><figcaption aria-hidden="true">image-20250110135901377</figcaption></figure><figure><img src="image-20250110135911927.png" alt="image-20250110135911927" /><figcaption aria-hidden="true">image-20250110135911927</figcaption></figure><figure><img src="image-20250110135853018.png" alt="image-20250110135853018" /><figcaption aria-hidden="true">image-20250110135853018</figcaption></figure><h2 id="寻找密文">寻找密文</h2><p>得到了密钥，但是没有密文，在<code>sub_4D9660</code>汇编里也没找到</p><p>但是可以想到，一般来说是将输入的<code>flag</code>进行加密与预设的密文进行比较，上面也提到，存放输入的<code>flag</code>的地方是<code>bss</code>段，于是去<code>0x5C6CC0</code>处查看交叉引用，发现果然有另外一个函数调用</p><figure><img src="image-20250110173035880.png" alt="image-20250110173035880" /><figcaption aria-hidden="true">image-20250110173035880</figcaption></figure><p>同样，这个函数里也有花指令</p><figure><img src="image-20250110173108323.png" alt="image-20250110173108323" /><figcaption aria-hidden="true">image-20250110173108323</figcaption></figure><p>但其实去了之后也没用，这个函数很短，而且注意到里面也有<code>call 寄存器</code>的操作，同样动调看一下</p><figure><img src="image-20250110173549668.png" alt="image-20250110173549668" /><figcaption aria-hidden="true">image-20250110173549668</figcaption></figure><p>可以看到是调用了<code>sub_405CAA</code>函数</p><figure><img src="image-20250110173616903.png" alt="image-20250110173616903" /><figcaption aria-hidden="true">image-20250110173616903</figcaption></figure><p>同样有花指令</p><figure><img src="image-20250110173723309.png" alt="image-20250110173723309" /><figcaption aria-hidden="true">image-20250110173723309</figcaption></figure><p>反汇编</p><figure><img src="image-20250110173803532.png" alt="image-20250110173803532" /><figcaption aria-hidden="true">image-20250110173803532</figcaption></figure><p>最好在动调的时候看，可以看到参数<code>a2</code>是<code>0x5C6CC0</code>，就是存放输入的地方</p><figure><img src="image-20250110174858284.png" alt="image-20250110174858284" /><figcaption aria-hidden="true">image-20250110174858284</figcaption></figure><p>下面的比较逻辑说明密文就是<code>v8</code>数组</p><p>（至于密文大小为什么不是上面动调得到的<code>0x32</code>我还没搞懂</p><figure><img src="image-20250110175018579.png" alt="image-20250110175018579" /><figcaption aria-hidden="true">image-20250110175018579</figcaption></figure><h2 id="反调试">反调试</h2><p>但是解了一下发现还是不对，怀疑是反调试搞的鬼</p><p>回去看存储密钥的地方，是<code>data</code>段<code>0x5C5110</code>处，可以看到<code>sub_4053A5</code>函数调用了此数组</p><figure><img src="image-20250110210827528.png" alt="image-20250110210827528" /><figcaption aria-hidden="true">image-20250110210827528</figcaption></figure><p>同样有花指令</p><figure><img src="image-20250110210924503.png" alt="image-20250110210924503" /><figcaption aria-hidden="true">image-20250110210924503</figcaption></figure><p>反汇编可以看到，这里有一个反调试操作，将<code>0x5C5110</code>异或了<code>0x45</code></p><figure><img src="image-20250110213703546.png" alt="image-20250110213703546" /><figcaption aria-hidden="true">image-20250110213703546</figcaption></figure><p>所以动调出来的密钥要异或<code>0x45</code>，或者因为密钥在<code>data</code>段，也可以直接静态情况下去<code>0x5C5110</code>处取密钥</p><figure><img src="image-20250110215551053.png" alt="image-20250110215551053" /><figcaption aria-hidden="true">image-20250110215551053</figcaption></figure><h2 id="exp">EXP</h2><p>exp 如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">RC4_decrypt</span>(<span class="params">ciphertext</span>):</span><br><span class="line">    key = [<span class="number">146</span>, <span class="number">28</span>, <span class="number">43</span>, <span class="number">31</span>, <span class="number">186</span>, <span class="number">251</span>, <span class="number">162</span>, <span class="number">255</span>, <span class="number">7</span>, <span class="number">105</span>, <span class="number">125</span>, <span class="number">119</span>, <span class="number">24</span>, <span class="number">140</span>]</span><br><span class="line">    S = <span class="built_in">list</span>(<span class="built_in">range</span>(<span class="number">256</span>))</span><br><span class="line">    j = <span class="number">0</span></span><br><span class="line">    out = []</span><br><span class="line"></span><br><span class="line">    <span class="comment"># KSA (Key Scheduling Algorithm)</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">256</span>):</span><br><span class="line">        j = (j + S[i] + key[i % <span class="built_in">len</span>(key)]) % <span class="number">256</span></span><br><span class="line">        S[i], S[j] = S[j], S[i]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># PRGA (Pseudo Random Generation Algorithm)</span></span><br><span class="line">    i = j = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> char <span class="keyword">in</span> ciphertext:</span><br><span class="line">        i = (i + <span class="number">1</span>) % <span class="number">256</span>   </span><br><span class="line">        j = (j + S[i]) % <span class="number">256</span></span><br><span class="line">        S[i], S[j] = S[j], S[i]</span><br><span class="line">        out.append(<span class="number">0x23</span> ^ char ^ S[(S[i] + S[j]) % <span class="number">256</span>])</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">bytes</span>(out)</span><br><span class="line"></span><br><span class="line">ciphertext = [<span class="number">37</span>, <span class="number">205</span>, <span class="number">84</span>, <span class="number">175</span>, <span class="number">81</span>, <span class="number">28</span>, <span class="number">88</span>, <span class="number">211</span>, <span class="number">168</span>, <span class="number">75</span>, <span class="number">79</span>, <span class="number">86</span>, <span class="number">236</span>, <span class="number">131</span>, <span class="number">93</span>, <span class="number">212</span>, <span class="number">246</span>, <span class="number">71</span>, <span class="number">74</span>, <span class="number">111</span>, <span class="number">224</span>, <span class="number">115</span>, <span class="number">176</span>, <span class="number">165</span>, <span class="number">168</span>, <span class="number">195</span>, <span class="number">23</span>, <span class="number">129</span>, <span class="number">94</span>, <span class="number">43</span>, <span class="number">244</span>, <span class="number">246</span>, <span class="number">113</span>, <span class="number">234</span>, <span class="number">47</span>, <span class="number">255</span>, <span class="number">168</span>, <span class="number">99</span>, <span class="number">153</span>, <span class="number">87</span>]</span><br><span class="line">plaintext = RC4_decrypt(ciphertext)</span><br><span class="line"><span class="built_in">print</span>(plaintext.decode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> WP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> reverse </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Frida-Hook</title>
      <link href="/2024/07/04/Frida-Hook/"/>
      <url>/2024/07/04/Frida-Hook/</url>
      
        <content type="html"><![CDATA[<h1 id="frida-hook">Frida-Hook</h1><h2 id="frida概念">Frida概念</h2><p>Frida是一款开源的动态插桩工具，可以插入一些代码到原生App的内存空间去动态地监视和修改其行为，支持Windows、Mac、Linux、Android或者iOS，从安卓层面来讲，可以实现<code>Java</code>层和<code>Native</code>层<code>Hook</code>操作</p><p>此外，还有一个比较知名的逆向框架，Xposed</p><blockquote><p>Xposed直接编写Java代码，Java层hook方便，可打包模块持久化hook，缺点是环境配置繁琐，兼容性较差，难以Hook底层代码</p><p>Frida配置简单，免重启hook。支持Java层和Native层的hook操作，缺点是持久化hook相对麻烦</p></blockquote><h2 id="frida框架搭建">Frida框架搭建</h2><p>frida框架搭建分为两部分：客户端环境和服务端环境</p><h3 id="客户端">客户端</h3><p>在客户端我们可以编写Python代码，用于连接远程设备，提交要注入的代码到远程，接受服务端的发来的消息等，一般为PC端</p><h4 id="客户端环境配置">客户端环境配置：</h4><p><code>pip install frida</code></p><p><code>pip install frida-tools</code></p><blockquote><p>几点说明：</p><p>（1）通过pip安装的frida是可以跟python绑定的；另外frida现在也已经有了跟nodeJs绑定的版本， 因此也可以直接通过 npm进行安装</p><p>（2）frida-tools模块提供cli命令，和frida-server做交互</p></blockquote><h3 id="服务端">服务端</h3><p>在服务端，我们需要用Javascript代码注入到目标进程，操作内存数据，给客户端发送消息等操作。我们也可以把客户端理解成控制端，服务端理解成被控端，一般为Android设备端</p><h4 id="服务端环境配置">服务端环境配置：</h4><p><a href="https://github.com/frida/frida/releases">下载fridaserver</a>，但是需要注意frida服务端，也就是Android设备CPU的型号，可以用adb查看</p><blockquote><p>adb（Android Debug Bridge）是androidsdk里的一个工具，用这个工具可以直接操作管理android模拟器或者真实的andriod设备，其实就是一个命令行窗口，用于通过电脑端与模拟器或者真实Android设备交互。hook需要提前配好adb的环境</p></blockquote><p>adb查看手机CPU型号</p><p><code>adb shell getprop ro.product.cpu.abi</code></p><p>下载对应的服务端，解压</p><p><img src="image-20240620191053433.png" /></p><p>将解压后的服务端推到手机的/data/local/tmp目录</p><p><code>adb push frida-server-16.3.3-android-x86_64 /data/local/tmp</code></p><blockquote><p>可能出现的问题：</p><p><strong>remote secure_mkdirs failed: Permissiondenied</strong>：即权限不足，先<code>adb root</code>以root身份启动adb，再推即可</p></blockquote><p>将Android设备上的frida-server添加执行权，并运行该程序(需要root权限)</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">adb shell</span><br><span class="line"><span class="built_in">cd</span> /data/local/tmp</span><br><span class="line">su</span><br><span class="line"><span class="built_in">chmod</span> 777 frida-server-16.3.3-android-x86_64</span><br></pre></td></tr></table></figure><blockquote><p>可能出现的问题：</p><p><strong>su时Permissiondenied</strong>：无root权限，需要服务端，也就是Android设备，一般为模拟器或真机，打开root权限</p><p><img src="image-20240620195637134.png" /></p><p>另外，例如面具Magisk等软件可能也会影响</p></blockquote><p>此外，也可以直接通过模拟器直接往服务端传入server并赋予权限</p><h3 id="hook具体步骤">Hook具体步骤</h3><p>服务端启动server服务，还是通过adb进入服务端启动frida-server</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">adb shell</span><br><span class="line"><span class="built_in">cd</span> /data/local/tmp</span><br><span class="line">su</span><br><span class="line">./frida-server-16.3.3-android-x86_64</span><br></pre></td></tr></table></figure><p>同时可以打开frida日志捕获</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">logcat | grep <span class="string">&quot;D.zj2595&quot;</span></span><br></pre></td></tr></table></figure><p>然后在客户端即可启动frida进行hook，frida的具体用法可以参考<code>frida --help</code></p><h2 id="frida基础知识">Frida基础知识</h2><h3 id="frida的6个工具">frida的6个工具</h3><blockquote><p>fridaCLI：一个交互式解释器（REPL），交互形式与IPython类似，可以通过命令行交互</p><p>frida-ps: 用于列出进程的一个命令行工具，frida-ps -U查看当前手机运行的进程</p><p>frida-trace, frida-discover, frida-ls-devices,frida-kill：不常用，见<ahref="https://frida.re/docs/home/">官方文档</a></p></blockquote><h3 id="操作模式">操作模式</h3><table><colgroup><col style="width: 8%" /><col style="width: 31%" /><col style="width: 31%" /><col style="width: 27%" /></colgroup><thead><tr class="header"><th style="text-align: left;">操作模式</th><th style="text-align: left;">描述</th><th style="text-align: left;">优点</th><th style="text-align: left;">主要用途</th></tr></thead><tbody><tr class="odd"><td style="text-align: left;">CLI（命令行）模式</td><tdstyle="text-align: left;">通过命令行直接将JavaScript脚本注入进程中，对进程进行操作</td><td style="text-align: left;">便于直接注入和操作</td><tdstyle="text-align: left;">在较小规模的操作或者需求比较简单的场景中使用</td></tr><tr class="even"><td style="text-align: left;">RPC模式</td><tdstyle="text-align: left;">使用Python进行JavaScript脚本的注入工作，实际对进程进行操作的还是JavaScript脚本，可以通过RPC传输给Python脚本来进行复杂数据的处理</td><tdstyle="text-align: left;">在对复杂数据的处理上可以通过RPC传输给Python脚本来进行，有利于减少被注入进程的性能损耗</td><tdstyle="text-align: left;">在大规模调用中更加普遍，特别是对于复杂数据处理的需求</td></tr></tbody></table><h3 id="注入模式与启动命令">注入模式与启动命令:</h3><table><colgroup><col style="width: 4%" /><col style="width: 24%" /><col style="width: 24%" /><col style="width: 24%" /><col style="width: 23%" /></colgroup><thead><tr class="header"><th style="text-align: left;">注入模式</th><th style="text-align: left;">描述</th><th style="text-align: left;">命令或参数</th><th style="text-align: left;">优点</th><th style="text-align: left;">主要用途</th></tr></thead><tbody><tr class="odd"><td style="text-align: left;">Spawn模式</td><tdstyle="text-align: left;">将启动App的权利交由Frida来控制，即使目标App已经启动，在使用Frida注入程序时还是会重新启动App</td><td style="text-align: left;">在CLI模式中，Frida通过加上 -f参数指定包名以spawn模式操作App</td><tdstyle="text-align: left;">适合于需要在App启动时即进行注入的场景，可以在App启动时即捕获其行为</td><tdstyle="text-align: left;">当需要监控App从启动开始的所有行为时使用</td></tr><tr class="even"><td style="text-align: left;">Attach模式</td><tdstyle="text-align: left;">在目标App已经启动的情况下，Frida通过ptrace注入程序从而执行Hook的操作</td><td style="text-align: left;">在CLI模式中，如果不添加 -f参数，则默认会通过attach模式注入App</td><tdstyle="text-align: left;">适合于已经运行的App，不会重新启动App，对用户体验影响较小</td><tdstyle="text-align: left;">在App已经启动，或者我们只关心特定时刻或特定功能的行为时使用</td></tr></tbody></table><p>Spawn模式</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">frida -U -f 进程名 -l hook.js</span><br></pre></td></tr></table></figure><p>Attach模式</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">frida -U 进程名 -l hook.js</span><br></pre></td></tr></table></figure><p>frida-server自定义端口</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./frida-server-16.3.3-android-x86_64 -l 0.0.0.0:6666</span><br></pre></td></tr></table></figure><p>frida日志捕获</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">logcat | grep <span class="string">&quot;D.zj2595&quot;</span>//D表示调试级别，后面是过滤标签</span><br></pre></td></tr></table></figure><p>模拟器端口转发</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb connect <span class="number">127</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">1</span>:端口号</span><br></pre></td></tr></table></figure><h3 id="基础语法">基础语法</h3><table><colgroup><col style="width: 47%" /><col style="width: 52%" /></colgroup><thead><tr class="header"><th style="text-align: left;">API名称</th><th style="text-align: left;">描述</th></tr></thead><tbody><tr class="odd"><td style="text-align: left;"><code>Java.use(className)</code></td><tdstyle="text-align: left;">获取指定的Java类并使其在JavaScript代码中可用。</td></tr><tr class="even"><td style="text-align: left;"><code>Java.perform(callback)</code></td><td style="text-align: left;">确保回调函数在Java的主线程上执行。</td></tr><tr class="odd"><tdstyle="text-align: left;"><code>Java.choose(className, callbacks)</code></td><td style="text-align: left;">枚举指定类的所有实例。</td></tr><tr class="even"><td style="text-align: left;"><code>Java.cast(obj, cls)</code></td><tdstyle="text-align: left;">将一个Java对象转换成另一个Java类的实例。</td></tr><tr class="odd"><tdstyle="text-align: left;"><code>Java.enumerateLoadedClasses(callbacks)</code></td><td style="text-align: left;">枚举进程中已经加载的所有Java类。</td></tr><tr class="even"><tdstyle="text-align: left;"><code>Java.enumerateClassLoaders(callbacks)</code></td><td style="text-align: left;">枚举进程中存在的所有Java类加载器。</td></tr><tr class="odd"><tdstyle="text-align: left;"><code>Java.enumerateMethods(targetClassMethod)</code></td><td style="text-align: left;">枚举指定类的所有方法。</td></tr></tbody></table><h3 id="日志输出语法区别">日志输出语法区别</h3><table><colgroup><col style="width: 11%" /><col style="width: 40%" /><col style="width: 47%" /></colgroup><thead><tr class="header"><th style="text-align: left;">日志方法</th><th style="text-align: left;">描述</th><th style="text-align: left;">区别</th></tr></thead><tbody><tr class="odd"><td style="text-align: left;"><code>console.log()</code></td><td style="text-align: left;">使用JavaScript直接进行日志打印</td><tdstyle="text-align: left;">多用于在CLI模式中，<code>console.log()</code>直接输出到命令行界面，使用户可以实时查看。在RPC模式中，<code>console.log()</code>同样输出在命令行，但可能被Python脚本的输出内容掩盖。</td></tr><tr class="even"><td style="text-align: left;"><code>send()</code></td><tdstyle="text-align: left;">Frida的专有方法，用于发送数据或日志到外部Python脚本</td><tdstyle="text-align: left;">多用于RPC模式中，它允许JavaScript脚本发送数据到Python脚本，Python脚本可以进一步处理或记录这些数据。</td></tr></tbody></table><h3 id="hook框架模板">Hook框架模板</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">main</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="title class_">Java</span>.<span class="title function_">perform</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="comment">//自定义的hook函数</span></span><br><span class="line">        <span class="title function_">hookTest1</span>();</span><br><span class="line">    &#125;); </span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">setImmediate</span>(main);</span><br></pre></td></tr></table></figure><h2 id="frida常用api">Frida常用API</h2><h3id="hook普通方法打印参数和修改返回值">1.Hook普通方法、打印参数和修改返回值</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//定义一个名为hookTest1的函数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">hookTest1</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="comment">//获取一个名为&quot;类名&quot;的Java类，并将其实例赋值给JavaScript变量utils</span></span><br><span class="line">    <span class="keyword">var</span> utils = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;类名&quot;</span>);</span><br><span class="line">    <span class="comment">//修改&quot;类名&quot;的&quot;method&quot;方法的实现。这个新的实现会接收两个参数（a和b）</span></span><br><span class="line">    utils.<span class="property">method</span>.<span class="property">implementation</span> = <span class="keyword">function</span>(<span class="params">a, b</span>)&#123;</span><br><span class="line">        <span class="comment">//将参数a和b的值改为123和456。</span></span><br><span class="line">        a = <span class="number">123</span>;</span><br><span class="line">        b = <span class="number">456</span>;</span><br><span class="line">        <span class="comment">//调用修改过的&quot;method&quot;方法，并将返回值存储在`retval`变量中</span></span><br><span class="line">        <span class="keyword">var</span> retval = <span class="variable language_">this</span>.<span class="title function_">method</span>(a, b);</span><br><span class="line">        <span class="comment">//在控制台上打印参数a，b的值以及&quot;method&quot;方法的返回值</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(a, b, retval);</span><br><span class="line">        <span class="comment">//返回&quot;method&quot;方法的返回值</span></span><br><span class="line">        <span class="keyword">return</span> retval;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="hook重载参数">Hook重载参数</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// .overload()</span></span><br><span class="line"><span class="comment">// .overload(&#x27;自定义参数&#x27;)</span></span><br><span class="line"><span class="comment">// .overload(&#x27;int&#x27;)</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">hookTest2</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> utils = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;com.zj.wuaipojie.Demo&quot;</span>);</span><br><span class="line">    <span class="comment">//overload定义重载函数，根据函数的参数类型填</span></span><br><span class="line">    <span class="comment">//这里的Animal是自定义参数类型，需要去smali代码里找定义 </span></span><br><span class="line">    utils.<span class="property">Inner</span>.<span class="title function_">overload</span>(<span class="string">&#x27;com.zj.wuaipojie.Demo$Animal&#x27;</span>,<span class="string">&#x27;java.lang.String&#x27;</span>).<span class="property">implementation</span> = <span class="keyword">function</span>(<span class="params">a，b</span>)&#123;</span><br><span class="line">        b = <span class="string">&quot;aaaaaaaaaa&quot;</span>;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="title class_">Inner</span>(a,b);</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(b);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="hook构造函数">Hook构造函数</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">hookTest3</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> utils = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;com.zj.wuaipojie.Demo&quot;</span>);</span><br><span class="line">    <span class="comment">//修改类的构造函数的实现，$init表示构造函数</span></span><br><span class="line">    utils.<span class="property">$init</span>.<span class="title function_">overload</span>(<span class="string">&#x27;java.lang.String&#x27;</span>).<span class="property">implementation</span> = <span class="keyword">function</span>(<span class="params">str</span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(str);</span><br><span class="line">        str = <span class="string">&quot;52&quot;</span>;</span><br><span class="line">        <span class="variable language_">this</span>.$init(str);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="hook字段">Hook字段</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">hookTest5</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="title class_">Java</span>.<span class="title function_">perform</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="comment">//静态字段的修改</span></span><br><span class="line">        <span class="keyword">var</span> utils = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;com.zj.wuaipojie.Demo&quot;</span>);</span><br><span class="line">        <span class="comment">//修改类的静态字段&quot;flag&quot;的值</span></span><br><span class="line">        utils.<span class="property">staticField</span>.<span class="property">value</span> = <span class="string">&quot;我是被修改的静态变量&quot;</span>;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(utils.<span class="property">staticField</span>.<span class="property">value</span>);</span><br><span class="line">        <span class="comment">//非静态字段的修改</span></span><br><span class="line">        <span class="comment">//使用`Java.choose()`枚举类的所有实例</span></span><br><span class="line">        <span class="title class_">Java</span>.<span class="title function_">choose</span>(<span class="string">&quot;com.zj.wuaipojie.Demo&quot;</span>, &#123;</span><br><span class="line">            <span class="attr">onMatch</span>: <span class="keyword">function</span>(<span class="params">obj</span>)&#123;</span><br><span class="line">                <span class="comment">//修改实例的非静态字段&quot;_privateInt&quot;的值为&quot;123456&quot;，并修改非静态字段&quot;privateInt&quot;的值为9999。</span></span><br><span class="line">                obj.<span class="property">_privateInt</span>.<span class="property">value</span> = <span class="string">&quot;123456&quot;</span>; <span class="comment">//字段名与函数名相同 前面加个下划线</span></span><br><span class="line">                obj.<span class="property">privateInt</span>.<span class="property">value</span> = <span class="number">9999</span>;</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">onComplete</span>: <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="hook内部类">Hook内部类</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">hookTest6</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="title class_">Java</span>.<span class="title function_">perform</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="comment">//内部类</span></span><br><span class="line">        <span class="keyword">var</span> innerClass = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;com.zj.wuaipojie.Demo$innerClass&quot;</span>);</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(innerClass);</span><br><span class="line">        innerClass.<span class="property">$init</span>.<span class="property">implementation</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;eeeeeeee&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="枚举所有的类与类的所有方法">枚举所有的类与类的所有方法</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">hookTest7</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="title class_">Java</span>.<span class="title function_">perform</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="comment">//枚举所有的类与类的所有方法,异步枚举</span></span><br><span class="line">        <span class="title class_">Java</span>.<span class="title function_">enumerateLoadedClasses</span>(&#123;</span><br><span class="line">            <span class="attr">onMatch</span>: <span class="keyword">function</span>(<span class="params">name,handle</span>)&#123;</span><br><span class="line">                <span class="comment">//过滤类名</span></span><br><span class="line">                <span class="keyword">if</span>(name.<span class="title function_">indexOf</span>(<span class="string">&quot;com.zj.wuaipojie.Demo&quot;</span>) != -<span class="number">1</span>)&#123;</span><br><span class="line">                    <span class="variable language_">console</span>.<span class="title function_">log</span>(name);</span><br><span class="line">                    <span class="keyword">var</span> clazz = <span class="title class_">Java</span>.<span class="title function_">use</span>(name);</span><br><span class="line">                    <span class="variable language_">console</span>.<span class="title function_">log</span>(clazz);</span><br><span class="line">                    <span class="keyword">var</span> methods = clazz.<span class="property">class</span>.<span class="title function_">getDeclaredMethods</span>();</span><br><span class="line">                    <span class="variable language_">console</span>.<span class="title function_">log</span>(methods);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">onComplete</span>: <span class="keyword">function</span>(<span class="params"></span>)&#123;&#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="枚举所有方法">枚举所有方法</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">hookTest8</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="title class_">Java</span>.<span class="title function_">perform</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">var</span> <span class="title class_">Demo</span> = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;com.zj.wuaipojie.Demo&quot;</span>);</span><br><span class="line">        <span class="comment">//getDeclaredMethods枚举所有方法</span></span><br><span class="line">        <span class="keyword">var</span> methods = <span class="title class_">Demo</span>.<span class="property">class</span>.<span class="title function_">getDeclaredMethods</span>();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">var</span> j=<span class="number">0</span>; j &lt; methods.<span class="property">length</span>; j++)&#123;</span><br><span class="line">            <span class="keyword">var</span> methodName = methods[j].<span class="title function_">getName</span>();</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(methodName);</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">var</span> k=<span class="number">0</span>; k&lt;<span class="title class_">Demo</span>[methodName].<span class="property">overloads</span>.<span class="property">length</span>; k++)&#123;</span><br><span class="line">                <span class="title class_">Demo</span>[methodName].<span class="property">overloads</span>[k].<span class="property">implementation</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">                    <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;<span class="variable language_">arguments</span>.<span class="property">length</span>;i++)&#123;</span><br><span class="line">                        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">arguments</span>[i]);</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">return</span> <span class="variable language_">this</span>[methodName].<span class="title function_">apply</span>(<span class="variable language_">this</span>,<span class="variable language_">arguments</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="主动调用">主动调用</h3><p>静态方法</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="title class_">ClassName</span>=<span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;com.zj.wuaipojie.Demo&quot;</span>); </span><br><span class="line"><span class="title class_">ClassName</span>.<span class="title function_">privateFunc</span>(<span class="string">&quot;传参&quot;</span>);</span><br></pre></td></tr></table></figure><p>非静态方法</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> ret = <span class="literal">null</span>;</span><br><span class="line"><span class="title class_">Java</span>.<span class="title function_">perform</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="title class_">Java</span>.<span class="title function_">choose</span>(<span class="string">&quot;com.zj.wuaipojie.Demo&quot;</span>,&#123;    <span class="comment">//要hook的类</span></span><br><span class="line">        <span class="attr">onMatch</span>:<span class="keyword">function</span>(<span class="params">instance</span>)&#123;</span><br><span class="line">            ret=instance.<span class="title function_">privateFunc</span>(<span class="string">&quot;aaaaaaa&quot;</span>); <span class="comment">//要hook的方法</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">onComplete</span>:<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="comment">//console.log(&quot;result: &quot; + ret);</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//return ret;</span></span><br></pre></td></tr></table></figure><p><img src="1854922-20210928094645988-515545896.png" /></p><p><img src="1854922-20210928095039500-1584613007.png" /></p><h2 id="参考文章">参考文章</h2><p><ahref="https://www.cnblogs.com/andy0816/p/15178704.html">安卓逆向6，frida逆向框架介绍，基础开发hookjava层，进阶开发hook native层，hook 加密类</a></p><p><ahref="https://www.52pojie.cn/thread-1823118-1-1.html">安卓逆向这档事》十三、是时候学习一下Frida一把梭了(上)</a></p><p><ahref="详解Hook框架frida，让你在逆向工作中效率成倍提升">详解Hook框架frida，让你在逆向工作中效率成倍提升</a></p>]]></content>
      
      
      <categories>
          
          <category> reverse笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hook </tag>
            
            <tag> Frida </tag>
            
            <tag> Android </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>符号执行与angr</title>
      <link href="/2024/03/28/%E7%AC%A6%E5%8F%B7%E6%89%A7%E8%A1%8C%E4%B8%8Eangr/"/>
      <url>/2024/03/28/%E7%AC%A6%E5%8F%B7%E6%89%A7%E8%A1%8C%E4%B8%8Eangr/</url>
      
        <content type="html"><![CDATA[<h1 id="符号执行与angr">符号执行与<code>angr</code></h1><h2 id="符号执行">符号执行</h2><p>符号执行（SymbolicExecution）是一种程序分析技术，可以通过静态分析程序来得到让特定代码区域执行的输入。同时，它是一种白盒的静态分析技术，即分析程序可能的输入需要能够获取到目标源代码的支持。</p><p>使用符号执行分析一个程序时，会使用符号值作为输入，而非一般执行程序时使用的具体值。笔者在学习的时候，感觉可以类比成概率论中的离散随机变量或者离散数学中的事件。在达到目标代码时，分析器可以得到相应的路径约束，然后通过约束求解器来得到可以触发目标代码的具体值。</p><h2 id="angr"><code>angr</code></h2><h3 id="简介">简介</h3><p><code>angr</code>是一个多架构二进制分析工具包，具有执行动态符号执行（如Mayhem、KLEE等）和对二进制文件进行各种静态分析的能力，是目前最好用的符号执行引擎之一，是逆向辅助分析的神器。</p><p>符号执行有两个基础：执行路径和符号，以下通过这两方面来学习。</p><p>执行路径：当程序读取文件的时候，我们需要将文件进行符号向量化当作我们的输入。我们需要创建一个<code>SimFile</code>对象，该对象是个模拟文件，然后将符号变量存放在模拟文件中并将模拟文件插入到<code>state</code>中，这样在模拟运行时，程序就会从我们模拟的文件中读取符号变量作为输入的参数进行后续的运行。</p><p>符号：当用户输入是从标准输入（<code>stdin</code>）中获得，比如简单调用<code>scanf</code>函数的时候，<code>angr</code>会自动注入符号进行符号化；然而，当用户输入更复杂，比如<code>scanf</code>函数的格式化字符串很复杂，或者从文件、网络或者UI中获取输入的时候，<code>angr</code>则不会自动注入符号，这时我们需要手动在需要的地方进行注入符号。<code>angr</code>中的符号是由<code>bitvector</code>（位向量）表示的，这一点与<code>z3</code>约束求解器类似，其实<code>angr</code>与<code>z3</code>在笔者看来有很多类似之处，都可以进行约束条件下的问题求解。</p><p>Angr其实并不是真正被运行起来的，它就向一个虚拟机，会读取每一条命令并在虚拟机中模拟该命令的行为。我们类比到更加常用的z3 库中，每个寄存器都可以相当与 z3中的一个变量，在模拟执行的过程中，这个变量会被延伸为一个表达式，而当我们成功找到了目标地址之后，通过表达式就可以求解对应的初值应该是什么了。</p><h3 id="安装">安装</h3><p>这里提供的是<code>docoker</code>安装方式</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#拉取docker镜像（注意名字是angr/angr）</span></span><br><span class="line">docker pull angr/angr</span><br><span class="line"><span class="comment">#两种方式与本地进行交互，一种是把本地的一个文件夹映射到容器的/angr，如下</span></span><br><span class="line">docker run -it -v 本地文件夹路径:/angr angr/angr</span><br><span class="line"><span class="comment">#另一种是把本地文件cp到容器中的/angr，如下</span></span><br><span class="line">docker <span class="built_in">cp</span> 本地文件路径 容器<span class="built_in">id</span>或名字:/angr</span><br><span class="line"><span class="comment">#同理，也可以把容器/angr下的文件cp到本地</span></span><br><span class="line">docker <span class="built_in">cp</span> 容器<span class="built_in">id</span>或名字:/angr 本地文件路径</span><br><span class="line"><span class="comment">#进入容器环境</span></span><br><span class="line">docker <span class="built_in">exec</span> -it 容器<span class="built_in">id</span> bash</span><br></pre></td></tr></table></figure><h3 id="在ctf中的应用">在ctf中的应用</h3><h4 id="简单re题">简单re题</h4><p>笔者学习<code>angr</code>主要是在ctf逆向题中应用，所以也没有深学，简单学习了一下流程，看了几位大佬的博客，主要掌握流程脚本</p><p><code>angr</code>的一般流程，一把梭</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> angr</span><br><span class="line">project = angr.Project(path_to_binary, auto_load_libs=<span class="literal">False</span>)    <span class="comment"># 加载程序，注意第一个参数是文件路径，不是文件名</span></span><br><span class="line">state = project.factory.entry_state()       <span class="comment"># 创建一个状态,默认为程序的入口地址</span></span><br><span class="line">simgr = project.factory.simgr(state)      <span class="comment"># 创建一个模拟器用来模拟程序执行,遍历所有路径</span></span><br><span class="line">simgr.explore(find=addr_1,avoid=addr_2)   <span class="comment"># 约束执行的流程，addr1为预期执行地址，addr2为避免地址（avoid不一定有）</span></span><br><span class="line"><span class="built_in">print</span>(simgr.found[<span class="number">0</span>].posix.dumps(<span class="number">0</span>))      <span class="comment">#打印结果</span></span><br></pre></td></tr></table></figure><h4 id="反ollvm">反<code>OLLVM</code></h4><p>笔者也是学到一半才想到，之前在学习<code>OLLVM</code>的时候用的反混淆工具<code>deflat</code>就是基于<code>angr</code>框架的，拍脑袋一想，还真是~</p><p>符号执行不是就是去除控制流平坦化的绝佳办法之一吗！</p><p>利用<code>angr</code>符号执行去除控制流平坦化的步骤可以归结为三个步骤：</p><ol type="1"><li>静态分析CFG得到序言/入口块（Prologue）、主分发器（Maindispatcher）、子分发器/无用块（Sub dispatchers）、真实块（Relevantblocks）、预分发器（Predispatcher）和返回块（Return）</li><li>利用符号执行恢复真实块的前后关系，重建控制流</li><li>根据第二步重建的控制流Patch程序，输出恢复后的可执行文件</li></ol><h4 id="vm"><code>VM</code></h4><p>如果<code>VM</code>题目的算法逻辑比较简单，可以考虑直接用<code>angr</code>一把梭，但也不是全能的，如果出题人有意设置陷阱例如构造陷阱循环递归、有意复杂化控制流可能导致路径爆炸等问题，超出了符号执行可以解决的能力范围，这个时候还是老老实实手搓吧~</p><h3 id="流程原理介绍搬的佬-的博客原文">*流程原理介绍(搬的佬的博客原文)</h3><h4 id="创建project">创建Project</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">path_to_binary = <span class="string">&quot;./00_angr_find&quot;</span> </span><br><span class="line">project = angr.Project(path_to_binary, auto_load_libs=<span class="literal">False</span>)</span><br></pre></td></tr></table></figure><p>使用angr的首要步骤就是创建Project加载二进制文件。angr的二进制装载组件是CLE，它负责装载二进制对象（以及它依赖的任何库）和把这个对象以易于操作的方式交给angr的其他组件。angr将这些包含在Project类中。一个Project类是代表了你的二进制文件的实体。你与angr的大部分操作都会经过它</p><p>auto_load_libs设置是否自动载入依赖的库，在基础题目中我们一般不需要分析引入的库文件，这里设置为否</p><blockquote><ul><li>如果<code>auto_load_libs</code>是<code>True</code>（默认值），真正的库函数会被执行。这可能正是也可能不是你想要的，取决于具体的函数。比如说一些libc的函数分析起来过于复杂并且很有可能引起path对其的尝试执行过程中的state数量的爆炸增长</li><li>如果<code>auto_load_libs</code>是<code>False</code>，且外部函数是无法找到的，并且Project会将它们引用到一个通用的叫做<code>ReturnUnconstrained</code>的<code>SimProcedure</code>上去，它就像它的名字所说的那样：它返回一个不受约束的值</li></ul></blockquote><h4 id="设置-state">设置 state</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">initial_state = project.factory.entry_state()</span><br></pre></td></tr></table></figure><p>state代表程序的一个实例镜像，模拟执行某个时刻的状态，就类似于<strong>快照</strong>。保存运行状态的上下文信息，如内存/寄存器等,我们这里使用<code>project.factory.entry_state()</code>告诉符号执行引擎从程序的入口点开始符号执行，除了使用<code>.entry_state()</code>创建 state 对象, 我们还可以根据需要使用其他构造函数创建 state</p><h4 id="设置-simulation-managers">设置 Simulation Managers</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">simulation = project.factory.simgr(initial_state)</span><br></pre></td></tr></table></figure><p>Project对象仅表示程序一开始的样子，而在执行时，我们实际上是对SimState对象进行操作，它代表程序的一个实例镜像，模拟执行某个时刻的状态</p><p><code>SimState</code>对象包含程序运行时信息，如内存/寄存器/文件系统数据等。SM（SimulationManagers）是angr中最重要的控制接口，它使你能够同时控制一组状态(state)的符号执行，应用搜索策略来探索程序的状态空间。</p><h4 id="运行探索满足路径需要的值">运行，探索满足路径需要的值</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">print_good_address = <span class="number">0x8048678</span>  </span><br><span class="line">simulation.explore(find=print_good_address)</span><br></pre></td></tr></table></figure><p>符号执行最普遍的操作是找到能够到达某个地址的状态，同时丢弃其他不能到达这个地址的状态。SM为使用这种执行模式提供了<code>.explore()</code>方法</p><p>当使用<code>find</code>参数启动<code>.explore()</code>方法时，程序将会一直执行，直到发现了一个和<code>find</code>参数指定的条件相匹配的状态。<code>find</code>参数的内容可以是想要执行到的某个地址、或者想要执行到的地址列表、或者一个获取state作为参数并判断这个state是否满足某些条件的函数。当<code>active</code>stash中的任意状态和<code>find</code>中的条件匹配的时候，它们就会被放到<code>found stash</code>中，执行随即停止。之后你可以探索找到的状态，或者决定丢弃它，转而探索其它状态。</p><h4 id="获取执行结果">获取执行结果</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> simulation.found:</span><br><span class="line">        solution_state = simulation.found[<span class="number">0</span>]  <span class="comment"># 获取通过 explore 找到符合条件的状态</span></span><br><span class="line">        solution = solution_state.posix.dumps(sys.stdin.fileno())</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;[+] Success! Solution is: &#123;&#125;&quot;</span>.<span class="built_in">format</span>(solution.decode(<span class="string">&quot;utf-8&quot;</span>)))</span><br></pre></td></tr></table></figure><p>此时相关的状态已经保存在了<code>simgr</code>当中，我们可以通过<code>simgr.found</code>来访问所有符合条件的分支，这里我们为了解题，就选择第一个符合条件的分支即可</p><p>这里解释一下<code>sys.stdin.fileno()</code>,在UNIX中，按照惯例，三个文件描述符分别表示标准输入、标准输出和标准错误</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> sys</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>sys.stdin.fileno()</span><br><span class="line"><span class="number">0</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>sys.stdout.fileno()</span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>sys.stderr.fileno()</span><br><span class="line"><span class="number">2</span></span><br></pre></td></tr></table></figure><p>所以一般也可以写成：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">solution = solution_state.posix.dumps(<span class="number">0</span>)</span><br></pre></td></tr></table></figure><h4 id="例题">例题</h4><h5 id="网鼎杯-2020-青龙组singal">[网鼎杯 2020 青龙组]singal</h5><p><img src="image-20240322224806843.png" /></p><p><code>main</code>函数逻辑简单，就是一个虚拟机逆向函数</p><p>找一下<code>find</code>和<code>avoid</code></p><p><img src="image-20240322225301783.png" /></p><p>整个<code>vm_operad</code>函数只有这一处<code>return</code>，猜测是正确输出</p><p><img src="image-20240322225356421.png" /></p><p><code>find</code>的地址是<code>0x40175E</code>，或者选择<code>main</code>函数中<code>puts</code>的地址也可</p><p><img src="image-20240322225711232.png" /></p><p><img src="image-20240322225759329.png" /></p><p><code>avoid</code>的地址是<code>0x4016E6</code></p><p><code>angr</code>一把梭</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> angr</span><br><span class="line">project = angr.Project(<span class="string">&#x27;./signal.exe&#x27;</span>, auto_load_libs=<span class="literal">False</span>)</span><br><span class="line">state = project.factory.entry_state()</span><br><span class="line">simgr = project.factory.simgr(state)</span><br><span class="line">simgr.explore(find=<span class="number">0x40175E</span>,avoid=<span class="number">0x4016E6</span>)</span><br><span class="line"><span class="built_in">print</span>(simgr.found[<span class="number">0</span>].posix.dumps(<span class="number">0</span>))</span><br></pre></td></tr></table></figure><p><img src="image-20240322225927809.png" /></p><h5 id="nkctf2024reez">[nkctf2024]REEZ</h5><p><img src="image-20240328124939161.png" /></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> angr</span><br><span class="line">project = angr.Project(<span class="string">&#x27;./outputfile&#x27;</span>, auto_load_libs=<span class="literal">False</span>)</span><br><span class="line">state = project.factory.entry_state()</span><br><span class="line">simgr = project.factory.simgr(state)</span><br><span class="line">simgr.explore(find=<span class="keyword">lambda</span> s: <span class="string">b&quot;What can I say? You are so great!&quot;</span> <span class="keyword">in</span> s.posix.dumps(<span class="number">1</span>))</span><br><span class="line"><span class="built_in">print</span>(simgr.found[<span class="number">0</span>].posix.dumps(<span class="number">0</span>))</span><br></pre></td></tr></table></figure><p>注意<code>explore</code>的条件不是地址，这个题没法用地址</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">simgr.explore(find=<span class="keyword">lambda</span> s: <span class="string">b&quot;What can I say? You are so great!&quot;</span> <span class="keyword">in</span> s.posix.dumps(<span class="number">1</span>))</span><br></pre></td></tr></table></figure><p>以下是chat给的各个参数的解释</p><p>让我们逐个解释这段代码中的各个参数的含义：</p><ol type="1"><li><code>simgr</code>: 这很可能是一个符号执行管理器（Symbolic ExecutionManager）的实例，用于管理符号执行过程中的状态和路径。</li><li><code>explore()</code>:这是符号执行管理器中的一个方法，用于探索程序的不同路径。</li><li><code>find=lambda s: b"What can I say? You are so great!" in s.posix.dumps(1)</code>:这是 <code>explore()</code>方法的参数，是一个函数，用于指定符号执行时的条件。在这里，<code>lambda s: ...</code>是一个匿名函数，<code>s</code> 是符号执行状态的一个变量。条件<code>b"What can I say? You are so great!" in s.posix.dumps(1)</code>指定了当符号执行状态 <code>s</code>的标准输出中包含特定字符串时停止探索。<ul><li><code>s</code>: 符号执行状态，代表程序执行过程中的一个状态。</li><li><code>s.posix.dumps(1)</code>: 这部分是获取符号执行状态<code>s</code> 的标准输出的内容。在这里，<code>1</code>表示标准输出文件描述符（stdout），<code>s.posix.dumps(1)</code>返回标准输出的内容作为一个字节串。</li><li><code>b"What can I say? You are so great!" in s.posix.dumps(1)</code>:这部分是条件，表示当特定字符串存在于标准输出中时，停止探索。</li></ul></li></ol><h5 id="有参数脚本">有参数脚本</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> angr</span><br><span class="line"><span class="keyword">import</span> claripy</span><br><span class="line">proj = angr.Project(<span class="string">&#x27;./angr2&#x27;</span>, auto_load_libs=<span class="literal">False</span>)</span><br><span class="line">argv1 = claripy.BVS(<span class="string">&quot;argv1&quot;</span>, <span class="number">9</span> * <span class="number">8</span>) // 这里用的单位是bit, 因此需要乘以<span class="number">8</span></span><br><span class="line">state = proj.factory.entry_state(args=[<span class="string">&#x27;./angr2&#x27;</span>, argv1]) // 导入参数</span><br><span class="line">simgr = proj.factory.simgr(state)</span><br><span class="line"><span class="built_in">print</span>(simgr.explore(find=<span class="number">0x4007DC</span>, avoid=<span class="number">0x4007EA</span>))</span><br><span class="line"><span class="built_in">print</span>(simgr.found[<span class="number">0</span>].solver.<span class="built_in">eval</span>(argv1, cast_to=<span class="built_in">bytes</span>)) // 直接输出是<span class="built_in">ascii</span>码, 用cast_to=<span class="built_in">bytes</span>转为<span class="built_in">bytes</span>类型</span><br></pre></td></tr></table></figure><h2 id="约束求解">约束求解</h2><h3 id="smt"><code>SMT</code></h3><p>前面说了这么多，其实没有提到，如何求解约束条件下的问题呢？<code>SMT</code>就是重要的原理方法之一，<code>z3</code>、<code>ida</code>的<code>Ponce</code>插件就是用的<code>SMT</code>。</p><p><code>SAT</code>（satisfiability）问题指的是命题逻辑公式的可满足性问题。但是<code>SAT</code> 在表达能力上有很大的局限性，需要比<code>SAT</code>更强的表达方式。在这种形势下，将<code>SAT</code>问题扩展为<code>SMT</code>，经过扩展，<code>SMT</code>能比<code>SAT</code>更好地表达一些人工智能和形式化方法领域内的问题，比如在资源规划、时序推理、编译器优化等很多方面用到了<code>SMT</code>。</p><p><code>SMT</code> 的全称是 Satisfiability ModuloTheories，可被翻译为“可满足性模理论”、“多理论下的可满足性问题”或者“特定（背景）理论下的可满足性问题”，其判定算法被称为<code>SMT</code> 求解器。简单地说，一个<code>SMT</code>公式是结合了理论背景的逻辑公式，其中的命题变量可以代表理论公式。</p><h2 id="结语">结语</h2><p>本文非原创，前面也提到，笔者是学习re的过程中来了解一下的，主要是摘录了几位大佬的博客，详细内容没有学习完全，在这里附上链接:</p><p><ahref="https://bbs.kanxue.com/thread-264878.htm">[原创]angr学习（二）-符号执行与angr_ctf_00/01/02</a></p><p><a href="https://www.wangan.com/p/11v74d3c17b0eae9">Angr使用技巧速通笔记</a></p><p><ahref="https://ylcao.top/2022/05/10/%E5%85%A5%E9%97%A8angr%E7%AC%A6%E5%8F%B7%E6%89%A7%E8%A1%8C%E6%A1%86%E6%9E%B6/">入门angr符号执行框架</a></p><p><a href="https://zhuanlan.zhihu.com/p/623524832">Angr使用技巧速通笔记</a></p><p><ahref="https://bluesadi.me/0x401RevTrain-Tools/angr/10_%E5%88%A9%E7%94%A8angr%E7%AC%A6%E5%8F%B7%E6%89%A7%E8%A1%8C%E5%8E%BB%E9%99%A4%E6%8E%A7%E5%88%B6%E6%B5%81%E5%B9%B3%E5%9D%A6%E5%8C%96/">利用angr符号执行去除控制流平坦化</a></p><p><ahref="https://www.anquanke.com/post/id/212816">Angr_CTF从入门到精通</a></p>]]></content>
      
      
      <categories>
          
          <category> reverse笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> reverse </tag>
            
            <tag> angr </tag>
            
            <tag> 符号执行 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>花指令</title>
      <link href="/2024/01/27/%E8%8A%B1%E6%8C%87%E4%BB%A4/"/>
      <url>/2024/01/27/%E8%8A%B1%E6%8C%87%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<h1 id="花指令">花指令</h1><h2 id="概念">概念</h2><p>花指令，<code>junk code</code>，也就是垃圾代码。实际上花指令的确是一些不影响程序逻辑的垃圾机器码，它存在的唯一意义就是干扰反汇编引擎和人为分析</p><p>花指令在真实代码中插入一些垃圾代码的同时还保证原有程序的正确执行，而程序无法很好地反编译，难以理解程序内容，达到混淆视听的效果，因此在程序的静态分析对抗中可以起到效果（也包括使re题变复杂</p><h2 id="分类">分类</h2><p>花指令大致可以分为可执行花指令和不可执行花指令两类</p><h3 id="可执行花指令">可执行花指令</h3><p>可执行的花指令本质是将指令的组成部分重新解释执行，这种花指令可以破坏反编译的分析,使得栈指针在反编译引擎中出现异常</p><h3 id="不可执行花指令">不可执行花指令</h3><p>这种花指令本质上是在跳转指令之后插入一个多字节指令的字节，欺骗反汇编器将这个字节之后的几个字节当成一个多字节指令解释，进而造成后续指令反汇编出错，而这部分花指令代码在程序的正常执行过程中不会被执行</p><h2 id="构造与patch">构造与patch</h2><h3 id="反汇编算法">反汇编算法</h3><p>常见的反汇编算法有两类，一类是线性扫描反汇编，对输入的数据逐字节翻译成汇编代码，因此简单地在<code>jmp</code>后插入<code>0xe8</code>（<code>0xe8</code>是<code>call</code>指令的机器码）就能骗到</p><p>另一类是递归下降反汇编，是一种基于控制流分析的算法，这类算法优先反汇编可达的代码，例如IDA。针对这类算法，可以通过设置永真或者永假条件，导致程序一定会执行，因为ida反汇编会优先反汇编接下去的部分（false分支）</p><p>其它更加详尽的花指令构造方法，这里引路<ahref="https://nnnewb.github.io/blog/p/learning-packer-07/">大佬的文章</a></p><h3 id="构造案例">构造案例</h3><p>我在学习花指令知识时看到的一个<ahref="https://www.anquanke.com/post/id/208682#h3-5">很好的例子</a></p><h3 id="patch的方法-nop">patch的方法-NOP</h3><p><img src="image-20240125203811902.png" /></p><p>上图是一个典型的不可执行花指令（<code>call</code>指令的地址不存在），而且这里就是我们上面提到的经典的在<code>jmp</code>后插入<code>0xe8</code>构造花指令的方法，我们将两条指令化为机器码看得更清楚（右键Undifine或快捷键U）</p><p><img src="image-20240125204212095.png" /></p><p><code>0x75</code>是<code>jnz</code>的机器码，<code>0xe8</code>是<code>call</code>的机器码</p><p>对付这种花指令，可以将<code>jnz</code>这个无效跳转直接nop掉（右键nop），至于<code>call</code>指令的部分不要这样，下面详述</p><h2 id="例题-hdctf2019maze">例题-[HDCTF2019]Maze</h2><p>其实上面的图来源于一道re题</p><p>前面upx脱壳的过程略，ida打开</p><p><img src="image-20240125172244493.png" /></p><p>看到标红地方是一个典型的不可执行花命令，这个数据明显不是地址，而且很有可能是指令，所以先不要直接nop</p><p>上面是一个没有用的跳转，那就把2C处的<code>jnz</code>给nop掉</p><p><img src="image-20240125172724844.png" /></p><p>2E处转为code（方法上文有），发现果然2F处是一个pop，并且下面一堆被IDA未识别的数据也一起转为指令了</p><p><img src="image-20240125173334448.png" /></p><p>此时数据地址是红色的，选中<code>_mian</code>函数头，快捷键P将其声明为函数，F5查看伪代码并分析</p><p>是个走迷宫的题啦~</p>]]></content>
      
      
      <categories>
          
          <category> reverse笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> reverse </tag>
            
            <tag> 花指令 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>buuctf [2019红帽杯]easyRE</title>
      <link href="/2024/01/23/buuctf-2019%E7%BA%A2%E5%B8%BD%E6%9D%AF-easyRE/"/>
      <url>/2024/01/23/buuctf-2019%E7%BA%A2%E5%B8%BD%E6%9D%AF-easyRE/</url>
      
        <content type="html"><![CDATA[<h1 id="buuctf-2019红帽杯easyre">buuctf [2019红帽杯]easyRE</h1><p>查壳</p><p><img src="image-20240123114625741.png" /></p><p>64位无壳，拖入IDA</p><p><img src="image-20240123114714915.png" /></p><p>全是这种函数，无main函数，有一个start函数但没什么用，打开字符串子视图看看有没有什么信息</p><p><img src="image-20240123114826506.png" /></p><p>前五个比较重要，跟进到唯一一个引用函数</p><p><img src="image-20240123115135954.png" /></p><p>分析一下第一阶段，就是输入一个长度为36的字符串，这里IDA的识别有点问题，v12、v13和v14应该是连在一起的一个数组，不然下面的if判断条件中v12数组会越界</p><p>写个脚本看一下v15里的是什么内容</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">v12=<span class="string">&quot;Iodl&gt;Qnb(ocy\x7Fy.i\x7Fd`3w&#125;wek9&#123;iy=~yL@EC&quot;</span></span><br><span class="line">v15=<span class="string">&#x27;&#x27;</span></span><br><span class="line">j=<span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> v12:</span><br><span class="line">    v15+=<span class="built_in">chr</span>(<span class="built_in">ord</span>(i)^j)</span><br><span class="line">    j+=<span class="number">1</span></span><br><span class="line"><span class="built_in">print</span>(v15)</span><br></pre></td></tr></table></figure><p>输出结果是 Info:The first four chars are `flag`，没什么用...</p><p>往下分析</p><p><img src="image-20240123120254716.png" /></p><p>输入的字符串进行10次函数运算后得到的结果与<code>off_6CC090</code>处字符进行比较</p><p>查看<code>sub_400E44</code>函数与<code>off_6CC090</code>内容</p><p><img src="image-20240123120621481.png" /></p><p><img src="image-20240123120720992.png" /></p><p>正常的base64表，其实刚才看字符串视图就已经看到了</p><p><img src="image-20240123120819735.png" /></p><p>这里就是加密后的字符串，解密十次得到</p><p><code>https://bbs.kanxue.com/thread-254172-3.htm</code></p><p>又被骗了...</p><p><img src="image-20240123121157163.png" /></p><p>其实真正的有效信息在<code>off_6CC090</code>下方，跟进引用函数</p><p><img src="image-20240123121356850.png" /></p><p>这里可以看到flag初具雏形，不用管上面的1234次循环，直接根据<code>byte_6CC0A0</code>处的内容可以得到v1和v4，这里<code>unsigned_int8</code>和<code>HIBYTE</code>是把低八位和高八位取出来，分别是f和g，可以合理猜测整个就是flag</p><p>脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">a=[<span class="number">0x40</span>, <span class="number">0x35</span>, <span class="number">0x20</span>, <span class="number">0x56</span>, <span class="number">0x5D</span>, <span class="number">0x18</span>, <span class="number">0x22</span>, <span class="number">0x45</span>, <span class="number">0x17</span>, <span class="number">0x2F</span>, <span class="number">0x24</span>, <span class="number">0x6E</span>, <span class="number">0x62</span>, <span class="number">0x3C</span>, <span class="number">0x27</span>, <span class="number">0x54</span>, <span class="number">0x48</span>, <span class="number">0x6C</span>, <span class="number">0x24</span>, <span class="number">0x6E</span>, <span class="number">0x72</span>, <span class="number">0x3C</span>, <span class="number">0x32</span>, <span class="number">0x45</span>, <span class="number">0x5B</span>]</span><br><span class="line">b=[<span class="string">&#x27;f&#x27;</span>,<span class="string">&#x27;l&#x27;</span>,<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;g&#x27;</span>]</span><br><span class="line">c=<span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>):</span><br><span class="line">    b[i]=<span class="built_in">chr</span>(<span class="built_in">ord</span>(b[i])^a[i])</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">25</span>):</span><br><span class="line">    c+=<span class="built_in">chr</span>(a[i]^<span class="built_in">ord</span>(b[i%<span class="number">4</span>]))</span><br><span class="line"><span class="built_in">print</span>(c)</span><br></pre></td></tr></table></figure><p>得到flag</p><p><img src="image-20240123123340185.png" /></p><p>虽然这题当时好像只是一道签到，但很搞的是被骗了两次...</p>]]></content>
      
      
      <categories>
          
          <category> WP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> reverse </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Z3-Solver</title>
      <link href="/2024/01/21/Z3-Solver%E5%AD%A6%E4%B9%A0/"/>
      <url>/2024/01/21/Z3-Solver%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<h1 id="z3-solver">Z3-Solver</h1><h2 id="简介">简介</h2><p>Z3Solver是一个微软出品的开源约束求解器，能够解决很多种情况下的给定部分约束条件寻求一组满足条件的解的问题</p><p>Z3Solver支持多种不同的问题领域，包括布尔逻辑、整数和实数的线性和非线性算术、位向量、数组、集合、函数等，主要应用领域包括软件验证、形式化验证、程序分析、人工智能和自动定理证明等</p><h2 id="语法">语法</h2><p>z3中有3种类型的变量，分别是<strong>整型(Int)</strong>，<strong>实型(Real)</strong>和<strong>向量(BitVec)</strong></p><p>对于整数类型数据，基本API：</p><ol type="1"><li>Int(name, ctx=None)，创建一个整数变量，name是名字</li><li>Ints (names, ctx=None)，创建多个整数变量，names是空格分隔名字</li><li>IntVal (val, ctx=None)，创建一个整数常量，有初始值，没名字</li></ol><p>对于实数类型的API与整数类型一致，向量(BitVec)则稍有区别：</p><ol type="1"><li>Bitvec(name,bv,ctx=None)，创建一个位向量，name是他的名字，bv表示大小</li><li>BitVecs(name,bv,ctx=None)，创建一个有多变量的位向量，name是名字，bv表示大小</li><li>BitVecVal(val,bv,ctx=None)，创建一个位向量，有初始值，没名字</li></ol><p>simplify(表达式)，对可以简化的表达式进行简化</p><h2 id="应用">应用</h2><h3 id="直接调用solve-函数">直接调用<code>solve()</code> 函数</h3><p><code>solve()</code> 函数会创造一个solver，然后对括号中的约束条件进行求解，<strong>需要注意默认情况下只会找到满足条件的一组解</strong>，因此提供约束条件时尽可能详尽，一个例子：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> z3 <span class="keyword">import</span> *</span><br><span class="line">x = Int(<span class="string">&#x27;x&#x27;</span>)                                         <span class="comment">#声明变量</span></span><br><span class="line">y = Int(<span class="string">&#x27;y&#x27;</span>)</span><br><span class="line">solve(x &gt; <span class="number">2</span>, y &lt; <span class="number">10</span>, x + <span class="number">2</span>*y == <span class="number">7</span>)                   <span class="comment">#添加约束条件</span></span><br><span class="line">&gt;&gt;&gt;[y = <span class="number">0</span>, x = <span class="number">7</span>]</span><br></pre></td></tr></table></figure><p><code>solve()</code>函数会自动打印解，不需要再套一层<code>print()</code></p><h3 id="创建solver求解器">创建Solver求解器</h3><p>基本按照 <strong>创建约束求解器、声明变量 -&gt; 添加约束条件 -&gt;验证是否有解 -&gt; 求解</strong> 的步骤进行</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> z3 <span class="keyword">import</span> *</span><br><span class="line">s = Solver()                <span class="comment">#创建约束求解器</span></span><br><span class="line">x = Int(<span class="string">&#x27;x&#x27;</span>)                <span class="comment">#声明变量</span></span><br><span class="line">y = Int(<span class="string">&#x27;y&#x27;</span>)</span><br><span class="line">s.add(x &gt; <span class="number">2</span>)                <span class="comment">#添加约束条件</span></span><br><span class="line">s.add(y &lt; <span class="number">10</span>)</span><br><span class="line">s.add(x + <span class="number">2</span>*y == <span class="number">7</span>)</span><br><span class="line"><span class="keyword">if</span> s.check() == sat:        <span class="comment">#验证是否有解</span></span><br><span class="line"><span class="built_in">print</span>(s.model())        <span class="comment">#求解并打印</span></span><br><span class="line">&gt;&gt;&gt;[y = <span class="number">0</span>, x = <span class="number">7</span>]</span><br></pre></td></tr></table></figure><h2 id="例题">例题</h2><h3 id="解数独">解数独</h3><p>文章链接：<ahref="https://blog.csdn.net/P01yH3dr0n/article/details/106784526">PythonZ3约束求解器解决数独问题</a></p><h3 id="guet-ctf2019re">[GUET-CTF2019]re</h3><p>前面脱壳逆向的过程略，找到关键函数</p><p><img src="image-20240121132512763.png" /></p><p>出现这么多线性判断语句，考虑用z3求解，脚本如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> z3 <span class="keyword">import</span> *</span><br><span class="line">s = Solver()</span><br><span class="line">a1 = [Int(<span class="string">&quot;[a1[%d]&quot;</span> % i) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">32</span>)]</span><br><span class="line"></span><br><span class="line">s.add( <span class="number">1629056</span> * a1[<span class="number">0</span>] == <span class="number">166163712</span> )</span><br><span class="line">s.add( <span class="number">6771600</span> * a1[<span class="number">1</span>] == <span class="number">731332800</span> )</span><br><span class="line">s.add( <span class="number">3682944</span> * a1[<span class="number">2</span>] == <span class="number">357245568</span> )</span><br><span class="line">s.add( <span class="number">10431000</span> * a1[<span class="number">3</span>] == <span class="number">1074393000</span> )</span><br><span class="line">s.add( <span class="number">3977328</span> * a1[<span class="number">4</span>] == <span class="number">489211344</span> )</span><br><span class="line">s.add( <span class="number">5138336</span> * a1[<span class="number">5</span>] == <span class="number">518971936</span> )</span><br><span class="line">s.add( a1[<span class="number">6</span>] == <span class="number">49</span> )</span><br><span class="line">s.add( <span class="number">7532250</span> * a1[<span class="number">7</span>] == <span class="number">406741500</span> )</span><br><span class="line">s.add( <span class="number">5551632</span> * a1[<span class="number">8</span>] == <span class="number">294236496</span> )</span><br><span class="line">s.add( <span class="number">3409728</span> * a1[<span class="number">9</span>] == <span class="number">177305856</span> )</span><br><span class="line">s.add( <span class="number">13013670</span> * a1[<span class="number">10</span>] == <span class="number">650683500</span> )</span><br><span class="line">s.add( <span class="number">6088797</span> * a1[<span class="number">11</span>] == <span class="number">298351053</span> )</span><br><span class="line">s.add( <span class="number">7884663</span> * a1[<span class="number">12</span>] == <span class="number">386348487</span> )</span><br><span class="line">s.add( <span class="number">8944053</span> * a1[<span class="number">13</span>] == <span class="number">438258597</span> )</span><br><span class="line">s.add( <span class="number">5198490</span> * a1[<span class="number">14</span>] == <span class="number">249527520</span> )</span><br><span class="line">s.add( <span class="number">4544518</span> * a1[<span class="number">15</span>] == <span class="number">445362764</span> )</span><br><span class="line">s.add( <span class="number">3645600</span> * a1[<span class="number">17</span>] == <span class="number">174988800</span> )</span><br><span class="line">s.add( <span class="number">10115280</span> * a1[<span class="number">16</span>] == <span class="number">981182160</span> )</span><br><span class="line">s.add( <span class="number">9667504</span> * a1[<span class="number">18</span>] == <span class="number">493042704</span> )</span><br><span class="line">s.add( <span class="number">5364450</span> * a1[<span class="number">19</span>] == <span class="number">257493600</span> )</span><br><span class="line">s.add( <span class="number">13464540</span> * a1[<span class="number">20</span>] == <span class="number">767478780</span> )</span><br><span class="line">s.add( <span class="number">5488432</span> * a1[<span class="number">21</span>] == <span class="number">312840624</span> )</span><br><span class="line">s.add( <span class="number">14479500</span> * a1[<span class="number">22</span>] == <span class="number">1404511500</span> )</span><br><span class="line">s.add( <span class="number">6451830</span> * a1[<span class="number">23</span>] == <span class="number">316139670</span> )</span><br><span class="line">s.add( <span class="number">6252576</span> * a1[<span class="number">24</span>] == <span class="number">619005024</span> )</span><br><span class="line">s.add( <span class="number">7763364</span> * a1[<span class="number">25</span>] == <span class="number">372641472</span> )</span><br><span class="line">s.add( <span class="number">7327320</span> * a1[<span class="number">26</span>] == <span class="number">373693320</span> )</span><br><span class="line">s.add( <span class="number">8741520</span> * a1[<span class="number">27</span>] == <span class="number">498266640</span> )</span><br><span class="line">s.add( <span class="number">8871876</span> * a1[<span class="number">28</span>] == <span class="number">452465676</span> )</span><br><span class="line">s.add( <span class="number">4086720</span> * a1[<span class="number">29</span>] == <span class="number">208422720</span> )</span><br><span class="line">s.add( <span class="number">9374400</span> * a1[<span class="number">30</span>] == <span class="number">515592000</span> )</span><br><span class="line">s.add( <span class="number">5759124</span> * a1[<span class="number">31</span>] == <span class="number">719890500</span> )</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> s.check() == sat:</span><br><span class="line">    m = s.model()</span><br><span class="line">    <span class="comment">#直接print(m)输出的是解，用eval和as_long处理一下</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">32</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="built_in">chr</span>(m.<span class="built_in">eval</span>(a1[i]).as_long()),end=<span class="string">&#x27;&#x27;</span>)</span><br></pre></td></tr></table></figure><p>这题有两个坑，一个是a1[6]不在这个判断条件中，一个是a1[16]和a1[17]位置调换了</p><h3 id="关于调整解的格式的补充">*关于调整解的格式的补充</h3><p>a1[6]要添加在约束条件中，不然最后输出会报错，有大佬指出用burp爆破可以得到本题的a1[6]</p><p>而且不能写成</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&quot; &quot;</span>.join([m.<span class="built_in">eval</span>(a1[i]).as_long() <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">32</span>)]))</span><br></pre></td></tr></table></figure><p>(我不知道为什么</p><p>有时候在使用.as_long() / .as_fraction()时会报错</p><p><code>AttributeError: 'NoneType' object has no attribute 'as_long'</code></p><p>解决方法详见链接：<ahref="https://blog.csdn.net/weixin_39251985/article/details/113865326">Z3求解器结果输出（python</a></p>]]></content>
      
      
      <categories>
          
          <category> reverse笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Z3 </tag>
            
            <tag> reverse </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Shell</title>
      <link href="/2024/01/07/Shell%E5%AD%A6%E4%B9%A0/"/>
      <url>/2024/01/07/Shell%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<h1 id="shell">Shell</h1><h2 id="概念">概念</h2><h4 id="shell-1">Shell</h4><p>解释执行用户输入的命令或程序等，交互式</p><p>Shell是一块包裹着系统核心的壳，处于操作系统的最外层，与用户直接对话，把用户的输入解释给操作系统，然后处理操作系统的输出结果，输出到屏幕给与用户看到结果</p><h4 id="shell脚本">Shell脚本</h4><p>命令或程序写在文件中，执行文件读取代码，这样的程序文件称为Shell脚本，非交互式</p><p>Windows中存在<code>*.bat</code>批处理脚本，Linux中常用<code>*.sh</code>脚本文件</p><h2 id="shebang">Shebang</h2><p>指的是文件开头的两个字符<code>#!</code> ，后跟解释器名称</p><p>①以<code>#!/bin/sh</code>开头的文件调用的是bash解释器</p><p>②以<code>#!/usr/bin/python</code>开头的文件调用的是python解释器</p><p>③以<code>#!/usr/bin/env 解释器名</code>开头的文件调用的是指定解释器</p><p>④若文件未指明Shebang，脚本执行的时候默认是当前Shell作为解释器，可以通过<code>echo $SHELL</code>指令查看</p><h3 id="执行shell脚本的方式">执行Shell脚本的方式</h3><p>①文件无x权限或脚本未指定Shebang时，使用<code>解释器名 script.sh</code>，提权<code>chmod +x script.sh</code></p><p>②文件有x权限可以使用<code>绝对/相对路径</code></p><p>③<code>source script.sh</code>或<code>. script.sh</code></p><p>④利用重定向写入符号<code>解释器名 &lt; script.sh</code>，这个命令会运行script.sh脚本，并将其内容作为输入传递给Shell解释器</p><p><img src="image-20240106134537311.png" /></p><h2 id="bash特性">Bash特性</h2><p>①文件路径tab键补全</p><p>②命令补全</p><p>③快捷键 ctrl + a，e，u，k，l</p><p>④通配符</p><p>⑤history</p><p><code>echo $HISTFILE</code>查看历史命令</p><p><code>! 历史id</code>快速执行历史命令</p><p><code>!!</code>调用上一条命令</p><h2 id="shell语言">Shell语言</h2><h3 id="变量">变量</h3><h4 id="定义">定义</h4><p>Shell脚本语言是一种弱类型语言，无需声明变量类型，默认字符串；标识符规则与C类似</p><h4 id="赋值">赋值</h4><p>Shell变量赋值不得有空格，会被识别为命令+参数等；单引号强引用，不识别特殊符号，双引号识别，反引号括起来的返回的是命令执行结果，相当于<code>$()</code></p><h4 id="查值">查值</h4><p><code>echo $变量名</code>或<code>echo $&#123;变量名&#125;</code></p><h4 id="作用域">作用域</h4><p>普通变量作用域是当前Shell（<code>pstree</code>查看进程树），切换Shell变量会丢失</p><p>每次调用解释器执行脚本都会开启一个子Shell，完毕后回到父Shell中，因此脚本中变量的定义赋值不会被保留；若采用<code>source</code>或<code>.</code>的方式执行脚本会在当前Shell执行</p><h4 id="环境变量">环境变量</h4><h5 id="配置文件">配置文件</h5><p>用户个人：<code>~/.bash_profile</code>、<code>~/.bashrc</code>，是远程登陆用户特有文件</p><p>全局配置文件：<code>/etc/profile</code>、<code>/etc/bashrc</code></p><p>以个人配置文件优先加载变量</p><h5 id="检查系统环境变量的命令">检查系统环境变量的命令</h5><p><code>set</code>输出当前Shell所有变量，包括全局变量与局部变量（sh脚本中定义的变量），<code>declare</code>相同</p><p><code>env</code>显示全局变量，<code>export</code>显示环境变量</p><h5 id="撤销环境变量">撤销环境变量</h5><p><code>unset</code>删除变量或函数</p><h5 id="设置只读变量">设置只读变量</h5><p><code>readonly</code>当前Shell结束只读变量失效</p><h5 id="环境变量文件加载顺序">环境变量文件加载顺序</h5><p><code>/etc/profile</code> -&gt;<code>/etc/profile.d</code>目录下的脚本 -&gt;<code>~/.bash_profile</code> -&gt; <code>~/.bashrc</code> -&gt;<code>/etc/bashrc</code></p><h4 id="特殊变量">特殊变量</h4><p><img src="image-20240106004329246.png" /></p><h5 id="补充">补充</h5><p>$$ 当前Shell脚本的进程号</p><p>$_ 取得上次执行命令的最后一个参数</p><h3 id="基础内置命令bash">基础内置命令（Bash）</h3><h4 id="echo">echo</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">-n 不换行输出</span><br><span class="line">-e 解析字符串中的特殊符号</span><br><span class="line">printf 打印命令</span><br></pre></td></tr></table></figure><h4 id="eval">eval</h4><p>执行多个命令，分号隔开</p><h4 id="exec">exec</h4><p>不创建子进程执行后续命令，执行完毕后exit</p><h3 id="父子shell">父子Shell</h3><p>父Shell的PID是子Shell的PPID</p><p><code>ps</code>进程管理命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ps -ef</span><br><span class="line">-f 显示UID，PID，PPID</span><br><span class="line">-e 列出所有进程信息，与 -a 相同</span><br><span class="line">--forest 以树形结构展示进程之间的父子关系</span><br></pre></td></tr></table></figure><p>每次调用解释器都会开启一个子Shell，exit可以退出回到父Shell中</p><h4 id="进程列表">进程列表</h4><p>用<code>()</code>括起来的命令会作为一个进程列表，创建子Shell，<code>()</code>可以嵌套</p><p>用子Shell进行多进程处理，可以提高并发执行效率</p><h4 id="内置外置命令">内置/外置命令</h4><p>外置命令运行更慢，并且会开启子进程执行；<code>type</code>命令判断命令为内置/外置，<code>compgen -b</code>列出内置命令</p>]]></content>
      
      
      <categories>
          
          <category> 其它笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Shell </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计算机网络笔记（六）</title>
      <link href="/2023/12/21/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E7%AC%94%E8%AE%B0%EF%BC%88%E5%85%AD%EF%BC%89/"/>
      <url>/2023/12/21/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E7%AC%94%E8%AE%B0%EF%BC%88%E5%85%AD%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h2 id="dhcp">6.1 DHCP</h2><p>自动分配的内容包括：IP地址、子网掩码、默认（缺省）网关、DNS服务器</p><p>服务器不能用DHCP</p><p>DHCP服务器的两大工作：租约请求（UDP）、租约续订</p><h3 id="工作流程">工作流程</h3><p>租用请求：源IP是0.0.0.0，目的IP是255.255.255.255，以MAC地址为主机标识</p><p>租用提供：目的IP是255.255.255.255</p><p>租用选择：与请求时相同</p><p>租用确认：与提供时相同</p><h3 id="租用续约">租用续约</h3><p><img src="image-20231222000709029.png" /></p><p>APIPA</p><p><img src="image-20231222000811798.png" /></p><p>流程</p><p>租用请求：源IP是上次给的IP，目的IP是DHCP服务器的IP，以MAC地址为主机标识</p><p>租用提供：目的IP是上次给的IP</p><p>租用选择：与请求时相同</p><p>租用确认：与提供时相同</p><p><strong>路由器隔离广播域，交换机隔离冲突域但不隔离广播域</strong></p><p><img src="image-20231222001115306.png" /></p><h2 id="dns">6.2 DNS</h2><p>DNS使用TCP和UDP（主要）的53端口</p><p>每一级域名长度限制63字符，总长度253字符，最后其实有一个点（.）</p><p><img src="image-20231222001348558.png" /></p><p>查询过程</p><p><img src="image-20231222002122742.png" /></p><p>递归查询不问过程只要结果</p><p><strong>域名与IP地址不是一一映射的</strong></p><h2 id="万维网">6.3 万维网</h2><h3 id="www工作流程">www工作流程</h3><p><img src="image-20231222002721556.png" /></p><h3 id="url">URL</h3><p><img src="image-20231222002823289.png" /></p><h3 id="http">HTTP</h3><p><img src="image-20231222002942391.png" /></p><p>HTTP 1.1相较于1.0持续连接、流水线方式</p><h3 id="http代理">HTTP代理</h3><p><img src="image-20231222003557889.png" /></p><h4 id="cookie">cookie</h4><p><img src="image-20231222003650652.png" /></p><h2 id="电子邮件">6.4 电子邮件</h2><h3 id="mua">MUA</h3><p><img src="image-20231222003811006.png" /></p><h3 id="mta和mda">MTA和MDA</h3><p><img src="image-20231222003848811.png" /></p><p>以下是随便写的...</p><p><img src="image-20231222004137734.png" /></p><h2 id="ftptftptelnet">6.5 FTP/TFTP/TELNET</h2><p>FTP是TCP，两个TCP连接，两种模式port、passive</p><p>TFTP是UDP，局域网，停等协议</p><p>TELNET是TCP，击键和命令转为NVT</p>]]></content>
      
      
      <categories>
          
          <category> 课程笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机网络 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计算机网络笔记（五）</title>
      <link href="/2023/12/21/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E7%AC%94%E8%AE%B0%EF%BC%88%E4%BA%94%EF%BC%89/"/>
      <url>/2023/12/21/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E7%AC%94%E8%AE%B0%EF%BC%88%E4%BA%94%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h2 id="传输层基本功能与udp协议">5.1 传输层基本功能与UDP协议</h2><h3 id="传输层功能">传输层功能</h3><p>传输层提供应用进程间的逻辑通信，且提供复用与分用功能</p><h3 id="udp协议">UDP协议</h3><p>无连接、不可靠</p><p>提供的数据单位协议是UDP报文或用户数据报（<strong>不做数据的划分</strong>）</p><p><img src="image-20231221225105915.png" /></p><p>报文格式</p><p><img src="image-20231221225240560.png" /></p><p>此处可以看出为什么上一章中ICMP报头需要包括IP数据报报头和数据前8个字节，因为前8个字节就是UDP数据报的报头，包含了进程（端口）</p><p>计算校验和：二进制反码求和</p><h3 id="tcp协议">TCP协议</h3><p>面向连接、可靠、开销更大</p><p><strong>不提供广播、多播</strong></p><p>提供的数据单位协议是TCP报文段</p><h3 id="基于端口标识进程">基于端口标识进程</h3><p><img src="image-20231221224846688.png" /></p><p>熟知端口号</p><p><img src="image-20231221224918165.png" /></p><p>记住TCP+UDP</p><h2 id="tcp协议-1">5.2 TCP协议</h2><p>面向连接、可靠、字节流、点到点、单位为段</p><p>报文结构</p><p><img src="image-20231221225723648.png" /></p><p>重要的字段</p><p><img src="image-20231221225955722.png" /></p><p><img src="image-20231221230037783.png" /></p><p><img src="image-20231221230238111.png" /></p><p><img src="image-20231221230323094.png" /></p><h2 id="tcp协议连接管理">5.3 TCP协议连接管理</h2><h3 id="tcp连接">TCP连接</h3><p>TCP连接的端点叫做套接字（socket)=（IP地址：端口号），每一条TCP连接被通信两端两个套接字所确定</p><h3 id="三次握手">三次握手</h3><p><img src="image-20231221231123421.png" /></p><p>第三次握手确保发送的不是旧的请求</p><h3 id="释放连接四次握手">释放连接四次握手</h3><p><img src="image-20231221231704901.png" /></p><h2 id="tcp协议可靠传输">5.4 TCP协议可靠传输</h2><h3 id="可靠传输原理">可靠传输原理</h3><p>超时重传机制</p><h3 id="停等协议">停等协议</h3><p>分组错误、分组丢失、确认丢失、确认收到</p><p>简单但信道利用率低</p><h3 id="流水线协议">流水线协议</h3><h3 id="滑动窗口协议">滑动窗口协议</h3><h3 id="tcp滑动窗口">TCP滑动窗口</h3><h3 id="tcp重传定时器">TCP重传定时器</h3><p><img src="image-20231221233946109.png" /></p><p><img src="image-20231221234103046.png" /></p><h3 id="其他定时器">其他定时器</h3><p>持续定时器、保活定时器、等待控制定时器</p><h3 id="tcp协议拥塞控制">5.5 TCP协议拥塞控制</h3><p>UDP没有拥塞控制能力</p><p><img src="image-20231221234652149.png" /></p><h3 id="慢开始和拥塞避免">慢开始和拥塞避免</h3><p><img src="image-20231221234806355.png" /></p><p><img src="image-20231221234946979.png" /></p><p>注意第二轮的阈值时上一轮拥塞时的一半</p><h3 id="快重传和快恢复">快重传和快恢复</h3><p><img src="image-20231221235100133.png" /></p><p><img src="image-20231221235255378.png" /></p><h3 id="随机早期检测网络层">随机早期检测（网络层）</h3><p>应用于路由器队列管理</p><p><img src="image-20231221235417607.png" /></p>]]></content>
      
      
      <categories>
          
          <category> 课程笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机网络 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计算机网络笔记（四）</title>
      <link href="/2023/12/21/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E7%AC%94%E8%AE%B0%EF%BC%88%E5%9B%9B%EF%BC%89/"/>
      <url>/2023/12/21/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E7%AC%94%E8%AE%B0%EF%BC%88%E5%9B%9B%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h2 id="网络层功能和ip协议">4.1 网络层功能和IP协议</h2><h3 id="网络层功能">网络层功能</h3><p>路由、寻址、网络互联、为上层提供服务</p><h3 id="网络层服务">网络层服务</h3><p>虚电路：提供高质量服务，典例ATM网络，通信需要提前建立虚电路</p><p>数据报（主要）：网络有高容错性（鲁棒性）、可靠性</p><p><img src="image-20231221191444338.png" /></p><h3 id="网络层协议">网络层协议</h3><p><img src="image-20231221191659413.png" /></p><h3 id="ip协议">IP协议</h3><p>无连接、不可靠</p><p><strong>帧格式</strong></p><p><img src="image-20231221191849865.png" /></p><p>版本：占4位，目前为4（在不断发展中）</p><p>首部长度：占4位，单位是双字（即32位，一般16位为一个字），但IP首部的固定部分是20字节，因此首部长度字段最小值为5，且首部长度最大为60字节（15*32/8）</p><p>总长度： 不超过最大传送单元MTU</p><p>标识：表明同一用户信息的不同数据段</p><p>标识（Flags）与片偏移</p><p><img src="image-20231221193825984.png" /></p><p>后续</p><p><img src="image-20231221194137892.png" /></p><p><img src="image-20231221194244235.png" /></p><p>填充字段保证报文32位对齐</p><h2 id="arp协议icmp协议">4.2 ARP协议/ICMP协议</h2><h3 id="arp协议">ARP协议</h3><p>MAC地址是固定的，ARP负责从网络层使用的IP地址解析出数据链路层的MAC地址，解析结果存储在主机缓存中，命令arp-a；一般在局域网内使用，与其他局域网需要路由网关</p><p><strong>帧格式</strong></p><p><img src="image-20231221195238244.png" /></p><h3 id="icmp协议">ICMP协议</h3><p>差错控制</p><p><strong>帧格式</strong></p><p><img src="image-20231221195717780.png" /></p><p>ICMP协议封装在IP协议中，IP协议封装在以太网协议中</p><p><img src="image-20231221195809376.png" /></p><p><strong>ICMP报文有效数据包括IP数据报报头与有效数据前8个字节</strong>，前8个字节包括了传输层中的端口号</p><h3 id="icmp命令">ICMP命令</h3><p>ping tracert（linux中是Trace route）</p><h2 id="ip地址">4.3 IP地址</h2><p>IP地址比MAC地址更有层次结构</p><p>局域网内主机的默认网关是连接的路由器的端口</p><p>子网掩码区分网络号与主机号进而区分远程和本地主机</p><h3 id="ip地址分类折半划分">IP地址分类（折半划分）</h3><p>A类子网掩码255.0.0.0，范围1.0.0.0-126.0.0.0，第一位0</p><p>B类255.255.0.0，范围128.0.0.0-191.255.0.0，前两位10</p><p>C类255.255.255.0，范围192.0.0.0-223.255.255.0，前三位110</p><p>D类前四位1110</p><p>E类前五位11110</p><h3 id="私网ip">私网IP</h3><p><img src="image-20231221202556872.png" /></p><h3 id="特殊ip">特殊IP</h3><p><img src="image-20231221202632653.png" /></p><p><strong>所有网段中全0（网络地址）和全1（广播地址）的地址是不可使用的（划分出的子网中的也是）</strong></p><h2 id="子网超网和cidr">4.4 子网、超网和CIDR</h2><p>子网：掩码借用网络号</p><p><img src="image-20231221204204431.png" /></p><p>超网：掩码借用主机号，也称路由聚合</p><h2 id="路由">4.5 路由</h2><h3 id="转发">转发</h3><p><img src="image-20231221205111710.png" /></p><p>路由表中都是网络地址，将目的地址与子网掩码相与，查看是否与路由表中的某项网络地址匹配，出现多个匹配项时，选择最长前缀匹配地址</p><p>转发过程中源、目的MAC变化，IP不变化</p><h2 id="路由算法">4.6 路由算法</h2><h3 id="分类">分类</h3><p><img src="image-20231221211901868.png" /></p><p>自治系统（AS）：内部采用一致路由策略</p><h3 id="路由协议">路由协议</h3><p>内部网关路由协议：RIP、OSPF</p><p>外部网关路由协议：BGP</p><h3 id="路由算法-1">路由算法</h3><p>距离矢量路由</p><p>链路状态路由：迪杰斯特拉算法，分组中包括序号和年龄（路由器重启问题）</p><p><img src="image-20231221212818612.png" /></p><h2 id="内部网关路由协议">4.7 内部网关路由协议</h2><h3 id="rip协议基于距离矢量路由">RIP协议（基于距离矢量路由）</h3><p><img src="image-20231221213118495.png" /></p><p>注意最大跳数是15跳</p><p><strong>避免环路机制</strong></p><p><img src="image-20231221213439818.png" /></p><p><strong>RIP定时器</strong></p><p><img src="image-20231221213551379.png" /></p><p>RIPv2格式</p><p><img src="image-20231221213722112.png" /></p><p>命令字段1为请求，2为响应</p><h3 id="ospf协议">OSPF协议</h3><p><img src="image-20231221213954217.png" /></p><p>报文格式</p><p><img src="image-20231221214101245.png" /></p><p>五种类型的OSPF分组</p><p><img src="image-20231221214321241.png" /></p><p>工作流程</p><p><img src="image-20231221214409844.png" /></p><h2 id="外部网关路由协议和多播路由协议">4.8外部网关路由协议和多播路由协议</h2><h3 id="bgp协议">BGP协议</h3><p><img src="image-20231221214800483.png" /></p><p>BGP的五种报文</p><p><img src="image-20231221215037059.png" /></p><p>报文格式</p><p><img src="image-20231221215111420.png" /></p><h3 id="多播">多播</h3><p>应用：会员点播</p><p>多播需要硬件多播地址支持，解决方法如下</p><p><img src="image-20231221215512357.png" /></p><p>多播需要成员管理协议</p><p>IGMP协议</p><p><img src="image-20231221215910851.png" /></p><p>工作流程略</p><p>多播需要多播路由协议</p><p>RPB、隧道技术，具体略</p><h2 id="路由器">4.9 路由器</h2><p>结构略</p><p>路由和转发</p><p>转发表硬件、路由表软件</p><p><strong>不分片</strong></p><p>略</p><p>略</p><p>略</p><h2 id="vpnnatmpls">4.10 VPN/NAT/MPLS</h2><h3 id="vpn">VPN</h3><p>分类：内联网、外联网、远程接入</p><h3 id="nat">NAT</h3><p>多内网主机共用外网IP</p><h3 id="mpls">MPLS</h3><p>略</p><h2 id="ipv6">4.11 IPv6</h2><h3 id="主要目标">主要目标</h3><p><img src="image-20231221222128138.png" /></p><h3 id="主要特点">主要特点</h3><p><img src="image-20231221222205002.png" /></p><h3 id="报文格式">报文格式</h3><p>略</p><h3 id="ipv6地址">IPv6地址</h3><p>单播、多播、任意播（通常是最近的一个）</p><p>连续的0允许压缩，但只允许一次</p><p>IPv4可记为：：128.10.2.1</p><p>CIDR斜线记法仍适用</p><p><img src="image-20231221223207704.png" /></p><p><img src="image-20231221223219562.png" /></p><p>本地链路单播地址即IPv4中的私有IP地址</p><p><img src="image-20231221223252267.png" /></p><p>够长，可以直接把MAC写进来，因此不需要ARP</p><h3 id="两类地址的过渡">两类地址的过渡</h3><p><img src="image-20231221223354246.png" /></p>]]></content>
      
      
      <categories>
          
          <category> 课程笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机网络 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>命令行收发邮件</title>
      <link href="/2023/11/24/%E5%91%BD%E4%BB%A4%E8%A1%8C%E6%94%B6%E5%8F%91%E9%82%AE%E4%BB%B6/"/>
      <url>/2023/11/24/%E5%91%BD%E4%BB%A4%E8%A1%8C%E6%94%B6%E5%8F%91%E9%82%AE%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<p>win11下telnet客户端默认是关闭的，首先打开telnet</p><p>控制面板-程序-程序与功能-启用或关闭Windows功能</p><p><img src="1.png" /></p><h3 id="发送邮件">发送邮件</h3><p>cmd中telnet远程登录163邮箱smtp服务器，端口号25</p><p><ahref="https://blog.csdn.net/gongqinglin/article/details/115975619">各种邮箱收发服务器地址及端口</a></p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">telnet smtp.<span class="number">163</span>.com <span class="number">25</span></span><br></pre></td></tr></table></figure><p><strong>注意：以下过程，telnet中输入任何字符如果有错，该条命令就需要回车重新写，就算回退重写只是表面改变了，实际还是接着输入，运行一定会报错或输出不符预期</strong></p><p>向服务器打招呼,看是否得到正确回应（有的服务器是ehlo）</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">helo hi</span><br></pre></td></tr></table></figure><p>选择 auth login登录方式</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">auth login</span><br></pre></td></tr></table></figure><p>输入base64编码后的用户名密码（用户名不带@163.com），Authenticationsuccessful验证成功</p><p>接着输入发件人邮箱、收件人邮箱，输入data开始写信</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mail from:&lt;发件人邮箱地址&gt;</span><br><span class="line">rcpt to:&lt;收件人邮箱地址&gt;</span><br><span class="line">data //开始写信的内容</span><br></pre></td></tr></table></figure><p>输入邮件主题</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">subject:<span class="title">hi</span></span></span><br></pre></td></tr></table></figure><p>空一行之后输入内容</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Hello world!</span><br></pre></td></tr></table></figure><p>写完后输入</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.</span><br></pre></td></tr></table></figure><p>进入收件人邮箱查看，有该邮件</p><p>以下是完整过程与结果截图</p><p><img src="2.png" /></p><h3 id="接收邮件">接收邮件</h3><p>pop3接收邮件，qq的端口号110，<strong>注意此处是110</strong>，QQ官网上给的995是SSL加密的端口</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">telnet pop.qq.com <span class="number">110</span></span><br></pre></td></tr></table></figure><p>先得在qq邮箱中启用pop3</p><p><img src="3.png" /></p><p><img src="4.png" /></p><p>授权码复制一下，等下password可以输授权码</p><p>登录pop3后，输入用户名、授权码</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">user 用户名</span><br><span class="line">pass 授权码</span><br></pre></td></tr></table></figure><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">list //查看所有邮件</span><br></pre></td></tr></table></figure><p><img src="6.png" /></p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">retr <span class="number">63</span> //retr命令查看邮件内容</span><br></pre></td></tr></table></figure><p><img src="7.png" /></p><p>此外还有命令</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">dele //删除邮件（非真正删除，而是标记删除）</span><br><span class="line">rset //恢复删除</span><br><span class="line">quit //退出时会把所有标记删除的邮件删除</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 课程笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> cmd </tag>
            
            <tag> 邮件 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计算机网络笔记（三）</title>
      <link href="/2023/11/23/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%89%EF%BC%89/"/>
      <url>/2023/11/23/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%89%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h2 id="数据链路层基本功能">3.1 数据链路层基本功能</h2><h3 id="封装成帧最重要">封装成帧（最重要）</h3><p>字符计数法、特殊字符界定法、特殊位串界定法（以01111110为帧的边界，正文中每5个1强制后面添0）、物理层编码违例法（以特殊波形作为帧的边界）</p><h3 id="透明传输">透明传输</h3><p>帧定界符：SOH（Start Of Header，ASCII码01）、EOT（End OfTransmission，ASCII码04），都是不可打印字符。当传送的帧是用文本文件组成的帧（文本文件中的字符都是从键盘上输入的），那么不管输入什么样的字符都可以放在帧中传输过去，称为透明传输。当数据中有SOH、EOT时会被数据链路层误判为帧的边界，因此在这样的数据前添加转义字符ESC</p><h3 id="差错控制">差错控制</h3><p><strong>检错码</strong></p><p>循环冗余校验CRC：n位冗余码（FCS帧检验序列）是由数据M添加n个0后除以n+1位除数P得到的余数，接收端将M与FCS拼接后除以相同的除数，余数为0正常，余数不为0丢弃</p><p><strong>纠错码</strong></p><p><strong>海明码</strong></p><h3 id="流量控制">流量控制</h3><p>滑动窗口协议、停等协议</p><h3 id="链路管理">链路管理</h3><p>建立、维持、释放连接</p><h2 id="ppp协议">3.2 PPP协议</h2><h3 id="链路类型">链路类型</h3><p>广播链路-&gt;MAC协议，点到点链路-&gt;PPP协议</p><h3 id="ppp协议功能">PPP协议功能</h3><p>成帧方法、链路控制协议LCP、网络层选项协商方法NCP</p><h3 id="ppp协议帧的格式">PPP协议帧的格式</h3><p><img src="3.2-1.png" /></p><p>Flag字段表示帧的边界</p><p>Add地址字段</p><p>Ctrl控制字段，实际内容为03，为了以后升级可以添加其他控制信息</p><p>协议字段可以通过协商为1个字节</p><p>FCS检验字段，通过协商可以是4个字节</p><h3 id="ppp协议透明传输">PPP协议透明传输</h3><p>异步传输（按字节顺序）：字符填充法，0x7E定界，信息字段中的0x7E变为0x7D和0x5E，若再出现0x7D，0x7D变为0x7D和0x5D；若出现ASCII码的控制字符（即数值小于Ox20的字符），则在该字符前面要加入一个Ox7D字节，同时将该字符的编码加以改变</p><p>同步传输（按时间顺序）：以01111110为帧的边界，正文中每5个1强制后面添0</p><h3 id="ppp协议工作流程">PPP协议工作流程</h3><p><img src="屏幕截图%202023-12-21%20101540.png" /></p><h3 id="ppp协议无差错控制">PPP协议无差错控制</h3><p>①数据链路层出现差错概率不大，使用简单的PPP协议</p><p>②PPP协议主要承载的是IP数据报，IP协议本身是不可靠、无连接的</p><p>③PPP协议中的FCS字段可以保证无差错接受</p><h2 id="局域网mac协议">3.3 局域网MAC协议</h2><p>局域网数据链路层采用广播式通信，节点可以访问网内其他节点，是单位、家庭接入网络主要形式</p><h3 id="网卡">网卡</h3><p>实现CSMA/CD和CSMA/CA协议的设备、进行数据的串/并行转换和缓存、需要在计算机操作系统安装设备驱动程序</p><p><img src="image-20231221103755831.png" /></p><p>此处的硬件地址即MAC地址</p><h3 id="mac地址">MAC地址</h3><p>可采用6字节或2字节，用 - 分割或 : 分割或不分割都可</p><p>6字节MAC地址的前3字节为组织唯一标识符，即厂商标识，后3字节为拓展唯一标识符，厂商自行指派，保证不重复</p><p>适配器接收到MAC帧时首先检查地址字段是否为本站，不是则丢弃，混杂模式的网卡可收下所有的帧</p><p>IEEE规定地址字段第一字节的最低位为I/G位，发往本地的地址包括以下三种</p><p>单播（一对一）帧：I/G位=0</p><p>广播（一对所有）帧：I/G位=1</p><p>多播（一对多）帧：48位地址全为1</p><h3 id="多址接入协议">多址接入协议</h3><p><img src="image-20231221121751529.png" /></p><p>固定多址接入协议对应物理层的TDM、FDM、CDM，SDMA是空（空间）分复用</p><h3 id="随机多址接入协议">随机多址接入协议</h3><p>完全随机：</p><p>纯ALOHA：产生数据立即发送，不考虑信道占用情况，冲突的报文被丢弃，发生冲突后随机延迟</p><p>时隙的ALOHA：在上面基础上改为报文长度固定、必须在一个时隙内传输（即时间被分为时隙，报文必须在时隙开始处发送）</p><p>（载波侦听多址协议）CSMA：</p><p>非坚持：当节点监听到信道忙时，随机后延一段时间再来监听</p><p>1-坚持：节点发送数据前，先监听信道，若信道忙则一直监听直到空闲，一空闲立刻发送（其实要等9.6μs的最小帧间间隔）</p><p>P-坚持：同上，但空闲时以P的概率发送数据，1-P的概率推迟</p><h2 id="csmacd协议">3.4 CSMA/CD协议</h2><p>有线局域网以太网采用的MAC协议</p><p>两个基本特点：不可靠、无连接，采用曼彻斯特编码方式</p><p><img src="image-20231221154425445.png" /></p><p>电磁波在1km电缆的传播时延约5μs</p><h3 id="争用期">争用期</h3><p>CSMA/CD采用1-坚持，端到端往返时延2τ称为争用期，大小为51.2μs，以太网规定最短帧长64字节，即512bit，从而对于10Mbit/s的以太网，发送512bit的时间就是51.2μs，即争用期大小</p><p>经过争用期这段时间还没有检测到碰撞，就肯定此次发送不会发生碰撞</p><h3 id="beb二进制指数退避算法">BEB（二进制指数退避）算法</h3><p><img src="image-20231221162109560.png" /></p><p>发送数据的站检测到冲突后，还会发送32bit或48bit的人为干扰信号，<strong>且这个信号发送在BEB算法之前</strong></p><h3 id="csmacd协议帧格式">CSMA/CD协议帧格式</h3><p><img src="image-20231221164319609.png" /></p><p>注意头部的8bit前同步码与帧开始定界符</p><p>以太网规定帧间最小间隔为9.6μs</p><h2 id="无线网mac协议">3.5 无线网MAC协议</h2><h3 id="无线网络">无线网络</h3><p>WPAN（无线个域网）-&gt; WLAN（无线局域网）-&gt; WMAN（无线城域网）-&gt; WWAN（无线广域网）</p><p>支持WPAN主流技术：ZigBee（自组织网络形式建立网络拓扑）、蓝牙（标准为IEEE802.15.1）</p><p>WMAN的典型无线宽带接入城域网技术标准WiMAX</p><p>WWAN是蜂窝通信系统的主要解决方案</p><p>WLAN协议主要是802.11协议</p><h3 id="bss基本业务集">802.11 BSS（基本业务集）</h3><p>BSS：存在接入点（AP），负责集内工作站之间的通信</p><p>IBSS：独立的基本业务集，无接入点，又称移动自组网模式（Adhoc），所有节点都是无线通信</p><p>业务集由SSID标识，BSS中的BSSID可以理解为AP的MAC地址</p><p>ESS：通过骨干网将多个BSS串联起来形成，同一个ESS内的SSID相同</p><p>DS（分布式系统）：通过AP将无线局域网与有线局域网相连</p><h2 id="csmaca协议">3.6 CSMA/CA协议</h2><h3 id="面临的问题">802.11面临的问题</h3><p>隐藏终端问题、暴露终端问题</p><h3 id="帧间间隔">帧间间隔</h3><p>SIFS：一次交互过程中，两帧之间的间隔</p><p>PIFS：点协调方式下（AP控制下）访问信道的时间间隔</p><p>DIFS：两次业务之间的时间间隔</p><p>EIFS：前一帧出错时，需要延迟的时间间隔</p><h3 id="信道预约流程">信道预约流程</h3><p><img src="image-20231221175006078.png" /></p><p>CSMA/CD是冲突检测，CA是冲突避免（设备限制无法边发送边监听）</p><h3 id="beb算法">BEB算法</h3><p>退避窗口默认开始为[0,31]个slot，发生一次重传后，竞争窗口在[0,63]个slot中随机选取一个，每发生一次重传，竞争窗口就移至下一个2的指数，六次封顶</p><h3 id="帧结构">802.11帧结构</h3><p><img src="image-20231221184305524.png" /></p><p>字段内容略（太多了不想学...</p><h2 id="物理层和数据链路层网络互联设备">3.7物理层和数据链路层网络互联设备</h2><h3 id="物理层">物理层</h3><p>集线器（中继器的集中）、中继器</p><h3 id="数据链路层">数据链路层</h3><p><strong>网桥</strong>：生成树算法</p><p><strong>交换机</strong>：</p><p>通过地址学习过程将端口与MAC地址对应，泛洪</p><p>转发有存储转发（检查差错）与直通转发两种工作方式</p><p>划分VLAN（虚拟局域网）：基于端口划分、基于MAC地址、根据网络层、基于组播（后两种不适合局域网）</p><p>链路类型：访问（Access）与干路（Trunk）（多个VLAN之间的通信）</p><p>干道链路两端，输出端口会剥离VLAN标签，基于802.1Q帧</p><p><img src="image-20231221190440290.png" /></p><p>如上图，802.1Q是基于802.11帧的，添加了Tag字段，PRI字段表示优先级</p>]]></content>
      
      
      <categories>
          
          <category> 课程笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机网络 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计算机网络笔记（二）</title>
      <link href="/2023/11/23/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E7%AC%94%E8%AE%B0%EF%BC%88%E4%BA%8C%EF%BC%89/"/>
      <url>/2023/11/23/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E7%AC%94%E8%AE%B0%EF%BC%88%E4%BA%8C%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h2 id="物理层">2.1 物理层</h2><p>物理层的协议常被称为规程（procedure）</p><p>数字信号离散，模拟信号连续</p><p>每秒钟传播码元的数目称为波特率</p><p>没有经过调制称为基带信号，仅对波形进行变换称为基带调制，也称编码；使用载波进行调制，把基带信号的频率范围搬移到较高的频段，并转换为模拟信号称为带通调制</p><h3 id="编码方式">编码方式</h3><p>不归零制、归零制、曼彻斯特编码（自同步）、差分曼彻斯特编码（线路可以反接但成本高）</p><h3 id="带通调制调幅调频调相">带通调制：调幅、调频、调相</h3><h3 id="信道最大数据速率">信道最大数据速率</h3><p>奈氏（无噪声条件）：$ C = 2Hlog_2L b/s $</p><p>香农（有噪声条件）：$ C = Hlog_2(1+S/N) b/s $</p><p>H 为信道带宽，L 为码元种类数（相位、调制方式等不同而不同），S为信道内所传信号的平均功率，N 为信道内部的高斯噪声功率</p><p>在理想低通（无噪声，带宽受限）条件下，为了避免码间串扰，极限码元传输速率为2H</p><h3 id="信噪比db-10-log_10sn">信噪比（dB）= 10 $ log_{10}(S/N) $</h3><h2 id="传输介质与多路复用">2.2 传输介质与多路复用</h2><h3 id="有线介质">有线介质</h3><p>双绞线：非屏蔽UTP、屏蔽STP，RJ45接口分为T-568A和T-568B（最常见接线线序）</p><p>光纤：单模原理绕射、多模原理反射</p><p><img src="2.2-1.png" /></p><h3 id="无线介质">无线介质</h3><p><img src="2.2-2.png" /></p><h3 id="多路复用">多路复用</h3><p>时分复用TDM（同步异步）、频分复用FDM（收音机；波分复用即光的频分复用）、码分复用CDM（自己和自己内积1，自己和反码内积-1，站点码元与码片内积1表示发送1，内积-1表示发送0，内积0表示未发送）</p>]]></content>
      
      
      <categories>
          
          <category> 课程笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机网络 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计算机网络笔记（一）</title>
      <link href="/2023/11/23/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89/"/>
      <url>/2023/11/23/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h2 id="什么是计算机网络">1.1 什么是计算机网络</h2><p>计算机网络是<strong>通信技术</strong>与<strong>计算机技术</strong>相结合，实现<strong>信息传输</strong>和<strong>资源共享</strong>的一种信息系统</p><h2 id="计算机网络体系结构">1.2 计算机网络体系结构</h2><p>有无确认即可不可靠</p><h3 id="面向连接的服务电话">面向连接的服务（电话）：</h3><p>可靠的消息流：报文系列、网上下载完整页面</p><p>可靠的字节流：远程登录、ftp下载通过缓冲区分批下载</p><p>不可靠的连接：数字化声音（视频、直播）</p><h3 id="无连接的服务邮政">无连接的服务（邮政）：</h3><p>不可靠的数据报：电子函件</p><p>有确认的数据报：挂号邮件、快递</p><p>问答：数据查询</p><h3 id="协议三要素语法语义同步">协议三要素：语法、语义、同步</h3><h2 id="osi参考模型">1.3 OSI参考模型</h2><p>根据计算机网络的定义，将其分为通信子网（通信技术）与资源子网（计算机技术）</p><h3 id="通信子网">通信子网</h3><p>物理层：比特流传输</p><p>数据链路层：规范相邻节点的转发</p><p>网络层：寻址和路由</p><h3 id="资源子网">资源子网</h3><p>传输层：屏蔽通信子网统一接口</p><p>会话层：不同业务之间的同步、恢复会话中断前状态</p><p>表示层：数据格式转换、压缩、加密</p><p>应用层：与用户交互（分配IP地址、域名解析）</p><p><img src="1.3-1.png" /></p><p>数据链路层分为逻辑链路控制子层与媒体访问控制子层（已弱化）</p><p>网络层+：网络互联、为上层提供虚连接或数据报服务</p><p>路由：</p><p><img src="1.3-2.png" /></p><h3 id="路由算法">路由算法</h3><p>静态：扩散法、固定路由选择、随机路由选择、基于流量的路由选择</p><p>动态：独立路由选择、集中路由选择、分布式路由选择</p><h3 id="传输质量控制">传输质量控制</h3><p>分ABC类网络分别提供不同级别的服务</p><p>简单法、基本错误恢复类、多路复用类、错误恢复和多路复用类、错误检测和恢复类</p><h3 id="会话层">会话层</h3><p>+活动管理，是一个概念上的层，功能很弱，往往合并于传输层或应用层</p><h3 id="表示层">表示层</h3><p>也是一个概念上的层，通常在应用层实现，实际上的数据加密在应用层（加密对象具体信息块、文件）、传输层（通信进程、会话）、网络层（两个节点间所有通信）、数据链路层实现</p><h3 id="应用层">应用层</h3><p>+路由协议（部分，意味着路由协议不全在网络层），分为与通信相关和与通信无关两种</p><h2 id="tcpip参考模型">1.4 TCP/IP参考模型</h2><p><img src="1.4-1.png" /></p><p><img src="1.4-2.png" /></p><h3 id="应用层-1">应用层</h3><p>所谓套接字(Socket)，就是对网络中不同主机上的应用进程之间进行双向通信的端点的抽象。一个套接字就是网络上进程通信的一端，提供了应用层进程利用网络协议交换数据的机制。<span class="math display">\[Socket\ =\ IP\ address\ +\ TCP\ or\ UDP\ port\]</span>端口号分为服务器端口号与客户端端口号，服务器端口号往往是知名端口号，如80端口是TCP端口，为http开放；53端口是UDP端口，为DNS服务器开放。客户端端口号不固定，从1024以上随机产生，小于1024的端口被知名端口占用了，如上上面两个</p><h3 id="传输层">传输层</h3><p>多播或广播通信只能选择UDP协议，因为它是无连接的，单播通信TCP/UDP都可</p><p>TCP大文件，因为它是可靠的，保证数据正确完整性，UDP小文件，信道利用率高，快速发送数据</p><h3 id="网络层">网络层</h3><p>核心IP协议，ARP协议在逻辑地址（IP地址）与物理地址（网卡地址）建立映射关系，ICMP协议进行故障定位与网络中简单的管理功能，IGMP协议支持在网络中的多播通信</p><h3 id="网络接口层">网络接口层</h3><p>没有明确的约束，ATM、X.25、帧中继、以太网、FDDI等支持IP协议的都可以接入进来</p><p><img src="1.4-3.png" /></p><p>常用讨论的模型：物理层、数据链路层、网络层、传输层、应用层</p><h2 id="网络性能参数">1.5 网络性能参数</h2><p>带宽也和速率单位相同 bit/s，吞吐量指的是有效数据的速率</p><p>时延分为发送（取决于分组长度与额定速率）、传播（取决于物理距离、介质）、处理（主机或路由器处理的过程）、排队、接入（取决于信道使用权）时延，</p><p>时延带宽积=传播时延×带宽，又称以bit为单位的链路长度</p><p>时延抖动：由于数据分组交换，所走路径不同时延不同，克服的方法是利用缓存，但会增加时延（看视频开在缓存加载就是这个道理）</p><p>往返时间（RTT）：也称ping时间，对实现可靠通信非常重要，用于计算重传时间，算短了可能造成网络拥塞，算长了可能导致可靠性下降</p><p>信道利用率：发送方在一个发送周期的时间内，有效的发送数据所需要的时间占整个发送周期的比率，网络利用率是全网络的信道利用率的加权平均值<span class="math display">\[D=\frac{D_0}{1-U}\]</span> $ D_0 $为网络空闲时的时延，U是网络利用率</p>]]></content>
      
      
      <categories>
          
          <category> 课程笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机网络 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2023.10校赛WP</title>
      <link href="/2023/11/08/%E6%A0%A1%E8%B5%9BWP/"/>
      <url>/2023/11/08/%E6%A0%A1%E8%B5%9BWP/</url>
      
        <content type="html"><![CDATA[<h1 id="misc">Misc</h1><h2 id="你好来签到的旅行者">你好，来签到的旅行者</h2><p>微信公众号发送flag获得</p><p><img src="EF5AD68201DA7EED949F8D3462390D18.jpg" /></p><h2 id="纯黑的噩梦">纯黑的噩梦</h2><p>docx文件本质是压缩包，改后缀为.zip打开</p><p>在word-media中可以查看word中的图片文件</p><p><del>第一张图片是出题人小黑子证明</del>，第二张是所有的黑图，第三张是flag</p><p><img src="image3.png" /></p><h2 id="踩踩我的图">踩踩我的图</h2><p>首先是图片隐写题常见思路，binwalk一下，发现里面果然有秘密</p><p><img src="7.png" /></p><p>根据题目文件夹名与提示，搜索Picsel关键词，发现符合“合二为一”“军用级加密”的软件为</p><p><strong>SSuite Picsel Security</strong>（不得不说misc的涉猎确实广</p><p>下载软件并合并两图片得到flag</p><p><img src="8.png" /></p><h2 id="ezpcapng">ezpcapng</h2><p>pcapng文件，用wireshark打开，发现显目的GET /tmp/sql/sql4.php HTTP/1.1条目</p><p><img src="QQ图片20231025000650.png" /></p><p>意识到本题考查的是sql注入，先过滤http数据包，发现很多条注入记录，考虑是sql盲注</p><figure><img src="QQ截图20231025001515.png" alt="QQ截图20231025001515" /><figcaption aria-hidden="true">QQ截图20231025001515</figcaption></figure><p>前面是一些猜解库名、表名等的注入，找到猜解flag的注入起点</p><p><img src="123.png" /></p><p>ASCII码值为102的字符为f，向下检查，四个字符为flag，就是这里没错，接着向下查找，列写出最终flag</p><p>（当然有能力可以写个脚本依次提取所有字符，本人是一个个列出来的</p><h1 id="crypto">Crypto</h1><h2 id="matryoshka-doll">Matryoshka-doll</h2><p>访问实例得到字符串</p><p>LJCGG6SMLBXXQZLHOBYVSVDLPJGFQ2ZQJRLVCMCZPJJGUZSYNQ3U26S2NJMTG4DILFUTAMSNPJETEWSYNMYFSV2FGVGVCPJ5</p><p>分析source.py代码逻辑</p><p><img src="1.png" /></p><p>凯撒移位位数为1至25的随机数，栅栏宽度为2至10的随机数，然后是base64加密与base32加密</p><p>需要注意的是，根据函数名rail_fence也可以注意到，这里的栅栏密码是W型变种</p><p>了解以上之后，通过在线解密网站可以解出base64加密前字符串</p><p>d73-z1zja93-y4-d4c4c}y{36cczab-6326ey4aa91</p><p>枚举解密栅栏</p><p><img src="2.png" /></p><p>找到符合XXXX{XXXXXXX···}格式的密文，再Caeser枚举得到flag</p><p><img src="3.png" /></p><p>（吐槽一下出题人写的脚本</p><p><img src="XYGLRPHNK3@TJ4%7D6ZV%60%7BYSC.png" /></p><h1 id="pwn">Pwn</h1><h2 id="签到">签到</h2><p>根据要求，在linux环境下nc ctf.qwq.cc 端口号即可获得flag</p><h2 id="红包题1024">红包题！1024！</h2><p>本人<del>不怎么会</del>根本不会pwn，把1024完成了获得shell</p><p>ls下发现flag</p><p>cat flag查看flag内容</p><h1 id="web">Web</h1><h2 id="checkin">checkin</h2><p>访问实例，<del>果然又是原神</del>，虽然不是web手，但也知道web手的核心要义是网页源代码</p><p>F12发现开发者工具快捷键被ban了，右键发现也被ban了</p><p>还好还有一招，在网址前添加view-source:查看源代码，发现flag</p><figure><img src="QQ图片20231025010640.png" alt="QQ图片20231025010640" /><figcaption aria-hidden="true">QQ图片20231025010640</figcaption></figure><h2 id="ezphp">ezphp</h2><p>代码审计</p><p><img src="QQ图片20231025011102.png" /></p><p>发现可以数组绕过md5验证，通过Filter伪协议读取源码</p><p>需要注意读取形式选择base64编码，否则根据if(strstr($res,"flag"))die("DaMie!")会无法正常回显flag</p><p>网址后补充：</p><p>&amp;username[]=0&amp;password[]=1&amp;url=php://filter/read=convert.base64-encode/resource=&amp;target=/../../../../flag</p><p>得到源码（base64编码后）</p><p><img src="QQ图片20231025012331.png" /></p><p>base64解码得到flag</p><h1 id="reverse">Reverse</h1><h2 id="check_in">321check_in</h2><p>下载附件打开，发现.exe文件甚至没有办法运行，出现闪退的情况</p><p>结合题目提示，查壳发现，.exe文件应该是用exe4j打包的</p><p><img src="11.png" /></p><p>下载exe4j正常运行程序，那么为什么一定要正常运行程序呢？</p><p>因为java反编译的工具不能直接反编译exe文件，需要得到class文件或者jar包</p><p>而通过exe4j打包的exe程序在exe运行时会在...jar的缓存文件</p><p>（虽然但是，我并没有找到attachment.jar</p><p>但是根据文件生成时间，在e4jD82C.tmp_dir1698213950文件夹下找到了readme.jar</p><p><img src="12.png" /></p><p>用jd-gui反编译readme.jar，在主函数中发现flag</p><p><img src="13.png" /></p><h2 id="babyida">babyida</h2><p>查壳，无壳32位程序，ida32打开，结合题目提示，在字符串窗口中查找flag，发现一个假的flag</p><p><img src="14.png" /></p><p>题目提示学下动调秒了，于是动态调试看看，用x32dbg打开，找到Can youfind the flag?关键字符串处</p><p><img src="15.png" /></p><p>其实这个地方下面已经看到flag了，但别直接列写当flag了，还是得动调一下（别问我怎么知道的</p><p>接着往下分析，在00A21467处发现关键判断语句 jne babyida.A2147B</p><p><img src="16.png" /></p><p>说明若上一句cmp的结果为不相等，会跳转至00A2147B，输出“wrong!”</p><p>根据上面一大堆的汇编指令大致可以看到，进行比较的字符串（即目标flag）存储在几个寄存器中</p><p>直接在00A2147B处添加断点，让程序运行到这先别跳转，然后查看寄存器的值</p><p>运行程序，F9程序停在00A2147B处，在eax中发现flag值</p><p><img src="17.png" /></p><p>（一点也不baby</p><h2 id="ez_z3">ez_z3</h2><p>查壳，64位UPX壳，upx -d脱壳，发现居然报错了</p><p><img src="QQ图片20231025152958.png" /></p><p>面向搜索引擎，发现是文件加壳之后又进行了混淆，发现确实如此，区段名进行了更改</p><p><img src="18.png" /></p><p>于是010editor打开文件，把文件里的XYU全部改成UPX，再upx-d，脱壳成功</p><p><img src="QQ图片20231025161939.png" /></p><p>拖入ida查看，分析各函数的大致作用，然后可以先用z3约束求解器解出数据，脚本如下</p><p>脚本原文链接：<ahref="https://ctttttttt.github.io/2023/03/26/57/#分析">NSSCTF-RoundXeasy_z3 | 逆向上分之路 (ctttttttt.github.io)</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> z3 <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">a1 = [BitVec(<span class="string">&quot;num[%d]&quot;</span> % i, <span class="number">32</span>) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">20</span>)]</span><br><span class="line">s = Solver()</span><br><span class="line">s.add(</span><br><span class="line">    <span class="number">20</span> * a1[<span class="number">19</span>] * <span class="number">19</span> * a1[<span class="number">18</span>]</span><br><span class="line">    + <span class="number">14</span> * a1[<span class="number">13</span>]</span><br><span class="line">    + <span class="number">13</span> * a1[<span class="number">12</span>]</span><br><span class="line">    + <span class="number">11</span> * a1[<span class="number">10</span>] * <span class="number">10</span> * a1[<span class="number">9</span>]</span><br><span class="line">    + <span class="number">30</span> * a1[<span class="number">5</span>]</span><br><span class="line">    + <span class="number">5</span> * a1[<span class="number">4</span>]</span><br><span class="line">    + a1[<span class="number">0</span>]</span><br><span class="line">+ <span class="number">2</span> * a1[<span class="number">1</span>]</span><br><span class="line">- <span class="number">3</span> * a1[<span class="number">2</span>]</span><br><span class="line">- <span class="number">4</span> * a1[<span class="number">3</span>]</span><br><span class="line">- <span class="number">7</span> * a1[<span class="number">6</span>]</span><br><span class="line">+ <span class="number">8</span> * a1[<span class="number">7</span>]</span><br><span class="line">- <span class="number">9</span> * a1[<span class="number">8</span>]</span><br><span class="line">- <span class="number">12</span> * a1[<span class="number">11</span>]</span><br><span class="line">- <span class="number">16</span> * a1[<span class="number">15</span>] * <span class="number">15</span> * a1[<span class="number">14</span>]</span><br><span class="line">- <span class="number">17</span> * a1[<span class="number">16</span>]</span><br><span class="line">- <span class="number">18</span> * a1[<span class="number">17</span>] == <span class="number">2582239</span>)</span><br><span class="line">s.add(</span><br><span class="line">    <span class="number">20</span> * a1[<span class="number">19</span>] * <span class="number">19</span> * a1[<span class="number">18</span>]</span><br><span class="line">    + <span class="number">14</span> * a1[<span class="number">13</span>]</span><br><span class="line">    + <span class="number">13</span> * a1[<span class="number">12</span>]</span><br><span class="line">    + <span class="number">11</span> * a1[<span class="number">10</span>] * <span class="number">10</span> * a1[<span class="number">9</span>]</span><br><span class="line">    + <span class="number">30</span> * a1[<span class="number">5</span>]</span><br><span class="line">    - <span class="number">7</span> * a1[<span class="number">6</span>]</span><br><span class="line">    + <span class="number">8</span> * a1[<span class="number">7</span>]</span><br><span class="line">    - <span class="number">9</span> * a1[<span class="number">8</span>]</span><br><span class="line">    + <span class="number">5</span> * a1[<span class="number">4</span>]</span><br><span class="line">    + <span class="number">3</span> * a1[<span class="number">2</span>]</span><br><span class="line">    + <span class="number">2</span> * a1[<span class="number">1</span>] * a1[<span class="number">0</span>]</span><br><span class="line">    - <span class="number">4</span> * a1[<span class="number">3</span>]</span><br><span class="line">    - <span class="number">12</span> * a1[<span class="number">11</span>]</span><br><span class="line">    - <span class="number">16</span> * a1[<span class="number">15</span>] * <span class="number">15</span> * a1[<span class="number">14</span>]</span><br><span class="line">    - (<span class="number">18</span> * a1[<span class="number">17</span>]</span><br><span class="line">       + <span class="number">17</span> * a1[<span class="number">16</span>]) == <span class="number">2602741</span>)</span><br><span class="line">s.add(<span class="number">19</span> * a1[<span class="number">18</span>]</span><br><span class="line">     + <span class="number">18</span> * a1[<span class="number">17</span>]</span><br><span class="line">     + <span class="number">14</span> * a1[<span class="number">13</span>] * <span class="number">13</span> * a1[<span class="number">12</span>]</span><br><span class="line">     + <span class="number">12</span> * a1[<span class="number">11</span>] * <span class="number">11</span> * a1[<span class="number">10</span>]</span><br><span class="line">     + <span class="number">9</span> * a1[<span class="number">8</span>]</span><br><span class="line">     + <span class="number">7</span> * a1[<span class="number">6</span>] * <span class="number">30</span> * a1[<span class="number">5</span>]</span><br><span class="line">     + a1[<span class="number">0</span>]</span><br><span class="line">     - <span class="number">2</span> * a1[<span class="number">1</span>]</span><br><span class="line">     - <span class="number">4</span> * a1[<span class="number">3</span>] * <span class="number">3</span> * a1[<span class="number">2</span>]</span><br><span class="line">     - <span class="number">5</span> * a1[<span class="number">4</span>]</span><br><span class="line">     + <span class="number">8</span> * a1[<span class="number">7</span>]</span><br><span class="line">     - <span class="number">10</span> * a1[<span class="number">9</span>]</span><br><span class="line">     - <span class="number">15</span> * a1[<span class="number">14</span>]</span><br><span class="line">     - <span class="number">17</span> * a1[<span class="number">16</span>] * <span class="number">16</span> * a1[<span class="number">15</span>]</span><br><span class="line">     - <span class="number">20</span> * a1[<span class="number">19</span>] == <span class="number">2668123</span>)</span><br><span class="line">s.add(<span class="number">20</span> * a1[<span class="number">19</span>] * <span class="number">19</span> * a1[<span class="number">18</span>]</span><br><span class="line">     + <span class="number">14</span> * a1[<span class="number">13</span>]</span><br><span class="line">     + (<span class="number">13</span> * a1[<span class="number">12</span>] + <span class="number">11</span> * a1[<span class="number">10</span>] - <span class="number">12</span> * a1[<span class="number">11</span>]) * <span class="number">10</span> * a1[<span class="number">9</span>]</span><br><span class="line">     + <span class="number">30</span> * a1[<span class="number">5</span>]</span><br><span class="line">     + <span class="number">5</span> * a1[<span class="number">4</span>]</span><br><span class="line">     + a1[<span class="number">0</span>]</span><br><span class="line">     + <span class="number">2</span> * a1[<span class="number">1</span>]</span><br><span class="line">     - <span class="number">3</span> * a1[<span class="number">2</span>]</span><br><span class="line">     - <span class="number">4</span> * a1[<span class="number">3</span>]</span><br><span class="line">     - <span class="number">7</span> * a1[<span class="number">6</span>]</span><br><span class="line">     + <span class="number">8</span> * a1[<span class="number">7</span>]</span><br><span class="line">     - <span class="number">9</span> * a1[<span class="number">8</span>]</span><br><span class="line">     - <span class="number">16</span> * a1[<span class="number">15</span>] * <span class="number">15</span> * a1[<span class="number">14</span>]</span><br><span class="line">     - <span class="number">17</span> * a1[<span class="number">16</span>]</span><br><span class="line">     - <span class="number">18</span> * a1[<span class="number">17</span>] == <span class="number">2520193</span>)</span><br><span class="line">s.add(</span><br><span class="line">    <span class="number">18</span> * a1[<span class="number">17</span>]</span><br><span class="line">    + <span class="number">17</span> * a1[<span class="number">16</span>]</span><br><span class="line">    + <span class="number">15</span> * a1[<span class="number">14</span>]</span><br><span class="line">    + <span class="number">13</span> * a1[<span class="number">12</span>] * <span class="number">12</span> * a1[<span class="number">11</span>]</span><br><span class="line">    + <span class="number">10</span> * a1[<span class="number">9</span>]</span><br><span class="line">    + <span class="number">9</span> * a1[<span class="number">8</span>] * <span class="number">8</span> * a1[<span class="number">7</span>]</span><br><span class="line">    + <span class="number">3</span> * a1[<span class="number">2</span>] * <span class="number">2</span> * a1[<span class="number">1</span>] * a1[<span class="number">0</span>]</span><br><span class="line">    - <span class="number">4</span> * a1[<span class="number">3</span>]</span><br><span class="line">    - <span class="number">5</span> * a1[<span class="number">4</span>]</span><br><span class="line">    - <span class="number">30</span> * a1[<span class="number">5</span>]</span><br><span class="line">    - <span class="number">7</span> * a1[<span class="number">6</span>]</span><br><span class="line">    - <span class="number">11</span> * a1[<span class="number">10</span>]</span><br><span class="line">    - <span class="number">14</span> * a1[<span class="number">13</span>]</span><br><span class="line">    - <span class="number">16</span> * a1[<span class="number">15</span>]</span><br><span class="line">    - <span class="number">19</span> * a1[<span class="number">18</span>]</span><br><span class="line">    - <span class="number">20</span> * a1[<span class="number">19</span>] == <span class="number">8904587</span>)</span><br><span class="line">s.add(</span><br><span class="line">    <span class="number">18</span> * a1[<span class="number">17</span>]</span><br><span class="line">    + <span class="number">7</span> * a1[<span class="number">6</span>] * <span class="number">30</span> * a1[<span class="number">5</span>] * <span class="number">5</span> * a1[<span class="number">4</span>]</span><br><span class="line">    + <span class="number">4</span> * a1[<span class="number">3</span>]</span><br><span class="line">    + <span class="number">8</span> * a1[<span class="number">7</span>]</span><br><span class="line">    + a1[<span class="number">0</span>]</span><br><span class="line">- <span class="number">2</span> * a1[<span class="number">1</span>]</span><br><span class="line">- <span class="number">3</span> * a1[<span class="number">2</span>]</span><br><span class="line">- <span class="number">9</span> * a1[<span class="number">8</span>]</span><br><span class="line">- <span class="number">11</span> * a1[<span class="number">10</span>] * <span class="number">10</span> * a1[<span class="number">9</span>]</span><br><span class="line">- <span class="number">16</span> * a1[<span class="number">15</span>] * (<span class="number">13</span> * a1[<span class="number">12</span>] + <span class="number">12</span> * a1[<span class="number">11</span>] - <span class="number">14</span> * a1[<span class="number">13</span>] - <span class="number">15</span> * a1[<span class="number">14</span>])</span><br><span class="line">- <span class="number">17</span> * a1[<span class="number">16</span>]</span><br><span class="line">- <span class="number">19</span> * a1[<span class="number">18</span>]</span><br><span class="line">- <span class="number">20</span> * a1[<span class="number">19</span>] == <span class="number">1227620874</span>)</span><br><span class="line">s.add(<span class="number">20</span> * a1[<span class="number">19</span>] * <span class="number">19</span> * a1[<span class="number">18</span>]</span><br><span class="line">     + <span class="number">17</span> * a1[<span class="number">16</span>]</span><br><span class="line">     + <span class="number">14</span> * a1[<span class="number">13</span>]</span><br><span class="line">     + <span class="number">13</span> * a1[<span class="number">12</span>]</span><br><span class="line">     + <span class="number">12</span> * a1[<span class="number">11</span>] * <span class="number">11</span> * a1[<span class="number">10</span>] * <span class="number">10</span> * a1[<span class="number">9</span>]</span><br><span class="line">     + <span class="number">7</span> * a1[<span class="number">6</span>] * <span class="number">30</span> * a1[<span class="number">5</span>]</span><br><span class="line">     + <span class="number">5</span> * a1[<span class="number">4</span>]</span><br><span class="line">     + <span class="number">3</span> * a1[<span class="number">2</span>]</span><br><span class="line">     + a1[<span class="number">0</span>]</span><br><span class="line">     + <span class="number">2</span> * a1[<span class="number">1</span>]</span><br><span class="line">     + <span class="number">4</span> * a1[<span class="number">3</span>]</span><br><span class="line">     + <span class="number">8</span> * a1[<span class="number">7</span>]</span><br><span class="line">     - <span class="number">9</span> * a1[<span class="number">8</span>]</span><br><span class="line">     - <span class="number">16</span> * a1[<span class="number">15</span>] * <span class="number">15</span> * a1[<span class="number">14</span>]</span><br><span class="line">     - <span class="number">18</span> * a1[<span class="number">17</span>] == <span class="number">1836606059</span>)</span><br><span class="line">s.add(</span><br><span class="line">    <span class="number">20</span> * a1[<span class="number">19</span>] * <span class="number">19</span> * a1[<span class="number">18</span>]</span><br><span class="line">    + <span class="number">16</span> * a1[<span class="number">15</span>] * <span class="number">15</span> * a1[<span class="number">14</span>]</span><br><span class="line">    + <span class="number">14</span> * a1[<span class="number">13</span>]</span><br><span class="line">    + <span class="number">13</span> * a1[<span class="number">12</span>]</span><br><span class="line">    + <span class="number">12</span> * a1[<span class="number">11</span>]</span><br><span class="line">    + <span class="number">7</span> * a1[<span class="number">6</span>] * <span class="number">30</span> * a1[<span class="number">5</span>]</span><br><span class="line">    + <span class="number">5</span> * a1[<span class="number">4</span>]</span><br><span class="line">    + <span class="number">2</span> * a1[<span class="number">1</span>] * a1[<span class="number">0</span>]</span><br><span class="line">    - <span class="number">3</span> * a1[<span class="number">2</span>]</span><br><span class="line">    + <span class="number">4</span> * a1[<span class="number">3</span>]</span><br><span class="line">    + <span class="number">8</span> * a1[<span class="number">7</span>]</span><br><span class="line">    - <span class="number">9</span> * a1[<span class="number">8</span>]</span><br><span class="line">    - <span class="number">10</span> * a1[<span class="number">9</span>]</span><br><span class="line">    - <span class="number">11</span> * a1[<span class="number">10</span>]</span><br><span class="line">    - <span class="number">17</span> * a1[<span class="number">16</span>]</span><br><span class="line">    - <span class="number">18</span> * a1[<span class="number">17</span>] == <span class="number">8720560</span>)</span><br><span class="line">s.add(<span class="number">20</span> * a1[<span class="number">19</span>] * <span class="number">19</span> * a1[<span class="number">18</span>]</span><br><span class="line">     + <span class="number">14</span> * a1[<span class="number">13</span>]</span><br><span class="line">     + <span class="number">13</span> * a1[<span class="number">12</span>]</span><br><span class="line">     + <span class="number">11</span> * a1[<span class="number">10</span>] * (<span class="number">10</span> * a1[<span class="number">9</span>] + <span class="number">30</span> * a1[<span class="number">5</span>] + <span class="number">5</span> * a1[<span class="number">4</span>] + <span class="number">4</span> * a1[<span class="number">3</span>] - <span class="number">7</span> * a1[<span class="number">6</span>] + <span class="number">8</span> * a1[<span class="number">7</span>] - <span class="number">9</span> * a1[<span class="number">8</span>])</span><br><span class="line">     + a1[<span class="number">0</span>]</span><br><span class="line">     + <span class="number">2</span> * a1[<span class="number">1</span>]</span><br><span class="line">     - <span class="number">3</span> * a1[<span class="number">2</span>]</span><br><span class="line">     - <span class="number">12</span> * a1[<span class="number">11</span>]</span><br><span class="line">     - (<span class="number">16</span> * a1[<span class="number">15</span>] - <span class="number">17</span> * a1[<span class="number">16</span>] - <span class="number">18</span> * a1[<span class="number">17</span>]) * <span class="number">15</span> * a1[<span class="number">14</span>] == <span class="number">11387045</span>)</span><br><span class="line">s.add(</span><br><span class="line">    <span class="number">20</span> * a1[<span class="number">19</span>] * <span class="number">19</span> * a1[<span class="number">18</span>]</span><br><span class="line">    + <span class="number">16</span> * a1[<span class="number">15</span>] * <span class="number">15</span> * a1[<span class="number">14</span>]</span><br><span class="line">    + <span class="number">14</span> * a1[<span class="number">13</span>]</span><br><span class="line">    + <span class="number">11</span> * a1[<span class="number">10</span>] * <span class="number">10</span> * a1[<span class="number">9</span>]</span><br><span class="line">    + <span class="number">9</span> * a1[<span class="number">8</span>]</span><br><span class="line">    + <span class="number">3</span> * a1[<span class="number">2</span>]</span><br><span class="line">    + a1[<span class="number">0</span>]</span><br><span class="line">- <span class="number">2</span> * a1[<span class="number">1</span>]</span><br><span class="line">+ <span class="number">4</span> * a1[<span class="number">3</span>]</span><br><span class="line">- <span class="number">5</span> * a1[<span class="number">4</span>]</span><br><span class="line">- <span class="number">30</span> * a1[<span class="number">5</span>]</span><br><span class="line">- <span class="number">7</span> * a1[<span class="number">6</span>]</span><br><span class="line">+ <span class="number">8</span> * a1[<span class="number">7</span>]</span><br><span class="line">- <span class="number">12</span> * a1[<span class="number">11</span>]</span><br><span class="line">- <span class="number">13</span> * a1[<span class="number">12</span>]</span><br><span class="line">- <span class="number">17</span> * a1[<span class="number">16</span>]</span><br><span class="line">- <span class="number">18</span> * a1[<span class="number">17</span>] == <span class="number">7660269</span>)</span><br><span class="line">s.add(<span class="number">20</span> * a1[<span class="number">19</span>] * <span class="number">19</span> * a1[<span class="number">18</span>]</span><br><span class="line">     + <span class="number">14</span> * a1[<span class="number">13</span>]</span><br><span class="line">     + <span class="number">13</span> * a1[<span class="number">12</span>]</span><br><span class="line">     + <span class="number">11</span> * a1[<span class="number">10</span>] * <span class="number">10</span> * a1[<span class="number">9</span>]</span><br><span class="line">     - <span class="number">12</span> * a1[<span class="number">11</span>]</span><br><span class="line">     + a1[<span class="number">0</span>]</span><br><span class="line">     + <span class="number">2</span> * a1[<span class="number">1</span>]</span><br><span class="line">     - (<span class="number">4</span> * a1[<span class="number">3</span>] * <span class="number">3</span> * a1[<span class="number">2</span>]</span><br><span class="line">      - <span class="number">5</span> * a1[<span class="number">4</span>]</span><br><span class="line">      - <span class="number">30</span> * a1[<span class="number">5</span>])</span><br><span class="line">     - <span class="number">7</span> * a1[<span class="number">6</span>]</span><br><span class="line">     + <span class="number">8</span> * a1[<span class="number">7</span>]</span><br><span class="line">     - <span class="number">9</span> * a1[<span class="number">8</span>]</span><br><span class="line">     - <span class="number">16</span> * a1[<span class="number">15</span>] * <span class="number">15</span> * a1[<span class="number">14</span>]</span><br><span class="line">     - <span class="number">17</span> * a1[<span class="number">16</span>]</span><br><span class="line">     - <span class="number">18</span> * a1[<span class="number">17</span>] == <span class="number">2461883</span>)</span><br><span class="line">s.add(</span><br><span class="line">    <span class="number">14</span> * a1[<span class="number">13</span>]</span><br><span class="line">    + <span class="number">11</span> * a1[<span class="number">10</span>] * <span class="number">10</span> * a1[<span class="number">9</span>]</span><br><span class="line">    + <span class="number">9</span> * a1[<span class="number">8</span>] * <span class="number">8</span> * a1[<span class="number">7</span>]</span><br><span class="line">    + <span class="number">7</span> * a1[<span class="number">6</span>]</span><br><span class="line">    + <span class="number">2</span> * a1[<span class="number">1</span>] * a1[<span class="number">0</span>]</span><br><span class="line">    - <span class="number">4</span> * a1[<span class="number">3</span>] * <span class="number">3</span> * a1[<span class="number">2</span>]</span><br><span class="line">    - <span class="number">5</span> * a1[<span class="number">4</span>]</span><br><span class="line">    - <span class="number">30</span> * a1[<span class="number">5</span>]</span><br><span class="line">    - <span class="number">12</span> * a1[<span class="number">11</span>]</span><br><span class="line">    - <span class="number">13</span> * a1[<span class="number">12</span>]</span><br><span class="line">    - <span class="number">15</span> * a1[<span class="number">14</span>]</span><br><span class="line">    - <span class="number">17</span> * a1[<span class="number">16</span>] * <span class="number">16</span> * a1[<span class="number">15</span>]</span><br><span class="line">    - <span class="number">18</span> * a1[<span class="number">17</span>]</span><br><span class="line">    - <span class="number">19</span> * a1[<span class="number">18</span>]</span><br><span class="line">    - <span class="number">20</span> * a1[<span class="number">19</span>] == -<span class="number">966296</span>)</span><br><span class="line"></span><br><span class="line">s.add(</span><br><span class="line"><span class="number">14</span> * a1[<span class="number">13</span>]</span><br><span class="line">     + <span class="number">13</span> * a1[<span class="number">12</span>]</span><br><span class="line">     + (<span class="number">11</span> * a1[<span class="number">10</span>] * <span class="number">10</span> * a1[<span class="number">9</span>] + <span class="number">30</span> * a1[<span class="number">5</span>] + <span class="number">5</span> * a1[<span class="number">4</span>] + <span class="number">3</span> * a1[<span class="number">2</span>] + <span class="number">4</span> * a1[<span class="number">3</span>] - <span class="number">7</span> * a1[<span class="number">6</span>] + <span class="number">8</span> * a1[<span class="number">7</span>] - <span class="number">9</span> * a1[<span class="number">8</span>])</span><br><span class="line">     * <span class="number">2</span></span><br><span class="line">     * a1[<span class="number">1</span>]</span><br><span class="line">     + a1[<span class="number">0</span>]</span><br><span class="line">     - <span class="number">12</span> * a1[<span class="number">11</span>]</span><br><span class="line">     - <span class="number">15</span> * a1[<span class="number">14</span>]</span><br><span class="line">     - <span class="number">16</span> * a1[<span class="number">15</span>]</span><br><span class="line">     - <span class="number">17</span> * a1[<span class="number">16</span>]</span><br><span class="line">     - <span class="number">18</span> * a1[<span class="number">17</span>]</span><br><span class="line">     - <span class="number">20</span> * a1[<span class="number">19</span>] * <span class="number">19</span> * a1[<span class="number">18</span>] == <span class="number">254500223</span></span><br><span class="line">    )</span><br><span class="line">s.add(</span><br><span class="line"><span class="number">16</span> * a1[<span class="number">15</span>] * <span class="number">15</span> * a1[<span class="number">14</span>]</span><br><span class="line">     + <span class="number">14</span> * a1[<span class="number">13</span>]</span><br><span class="line">     + <span class="number">11</span> * a1[<span class="number">10</span>] * <span class="number">10</span> * a1[<span class="number">9</span>]</span><br><span class="line">     + <span class="number">7</span> * a1[<span class="number">6</span>] * <span class="number">30</span> * a1[<span class="number">5</span>]</span><br><span class="line">     + a1[<span class="number">0</span>]</span><br><span class="line">     - <span class="number">2</span> * a1[<span class="number">1</span>]</span><br><span class="line">     - <span class="number">3</span> * a1[<span class="number">2</span>]</span><br><span class="line">     - <span class="number">5</span> * a1[<span class="number">4</span>] * <span class="number">4</span> * a1[<span class="number">3</span>]</span><br><span class="line">     + <span class="number">8</span> * a1[<span class="number">7</span>]</span><br><span class="line">     - <span class="number">9</span> * a1[<span class="number">8</span>]</span><br><span class="line">     - <span class="number">12</span> * a1[<span class="number">11</span>]</span><br><span class="line">     - <span class="number">13</span> * a1[<span class="number">12</span>]</span><br><span class="line">     - <span class="number">17</span> * a1[<span class="number">16</span>]</span><br><span class="line">     - <span class="number">18</span> * a1[<span class="number">17</span>]</span><br><span class="line">     - <span class="number">19</span> * a1[<span class="number">18</span>]</span><br><span class="line">     - <span class="number">20</span> * a1[<span class="number">19</span>] == <span class="number">6022286</span></span><br><span class="line">    )</span><br><span class="line">s.add(</span><br><span class="line"><span class="number">18</span> * a1[<span class="number">17</span>]</span><br><span class="line">     + <span class="number">16</span> * a1[<span class="number">15</span>]</span><br><span class="line">     - <span class="number">17</span> * a1[<span class="number">16</span>]</span><br><span class="line">     + <span class="number">14</span> * a1[<span class="number">13</span>]</span><br><span class="line">     + <span class="number">12</span> * a1[<span class="number">11</span>]</span><br><span class="line">     + <span class="number">11</span> * a1[<span class="number">10</span>] * <span class="number">10</span> * a1[<span class="number">9</span>]</span><br><span class="line">     + <span class="number">30</span> * a1[<span class="number">5</span>]</span><br><span class="line">     + <span class="number">5</span> * a1[<span class="number">4</span>]</span><br><span class="line">     + <span class="number">4</span> * a1[<span class="number">3</span>] * <span class="number">3</span> * a1[<span class="number">2</span>]</span><br><span class="line">     + <span class="number">2</span> * a1[<span class="number">1</span>] * a1[<span class="number">0</span>]</span><br><span class="line">     - <span class="number">9</span> * a1[<span class="number">8</span>] * <span class="number">8</span> * a1[<span class="number">7</span>] * <span class="number">7</span> * a1[<span class="number">6</span>]</span><br><span class="line">     - <span class="number">13</span> * a1[<span class="number">12</span>]</span><br><span class="line">     - <span class="number">15</span> * a1[<span class="number">14</span>]</span><br><span class="line">     - <span class="number">19</span> * a1[<span class="number">18</span>]</span><br><span class="line">     - <span class="number">20</span> * a1[<span class="number">19</span>] == -<span class="number">636956022</span></span><br><span class="line">    )</span><br><span class="line">s.add(</span><br><span class="line"><span class="number">20</span> * a1[<span class="number">19</span>] * <span class="number">19</span> * a1[<span class="number">18</span>]</span><br><span class="line">     + <span class="number">13</span> * a1[<span class="number">12</span>]</span><br><span class="line">     + <span class="number">12</span> * a1[<span class="number">11</span>]</span><br><span class="line">     + <span class="number">11</span> * a1[<span class="number">10</span>] * <span class="number">10</span> * a1[<span class="number">9</span>]</span><br><span class="line">     + <span class="number">7</span> * a1[<span class="number">6</span>]</span><br><span class="line">     + <span class="number">30</span> * a1[<span class="number">5</span>]</span><br><span class="line">     + <span class="number">5</span> * a1[<span class="number">4</span>]</span><br><span class="line">     + <span class="number">3</span> * a1[<span class="number">2</span>] * <span class="number">2</span> * a1[<span class="number">1</span>] * a1[<span class="number">0</span>]</span><br><span class="line">     - <span class="number">4</span> * a1[<span class="number">3</span>]</span><br><span class="line">     - <span class="number">9</span> * a1[<span class="number">8</span>] * <span class="number">8</span> * a1[<span class="number">7</span>]</span><br><span class="line">     - <span class="number">14</span> * a1[<span class="number">13</span>]</span><br><span class="line">     - <span class="number">15</span> * a1[<span class="number">14</span>]</span><br><span class="line">     - <span class="number">16</span> * a1[<span class="number">15</span>]</span><br><span class="line">     - <span class="number">17</span> * a1[<span class="number">16</span>]</span><br><span class="line">     - <span class="number">18</span> * a1[<span class="number">17</span>] == <span class="number">10631829</span></span><br><span class="line">)</span><br><span class="line">s.add(</span><br><span class="line"><span class="number">20</span> * a1[<span class="number">19</span>] * <span class="number">19</span> * a1[<span class="number">18</span>]</span><br><span class="line">     + <span class="number">16</span> * a1[<span class="number">15</span>]</span><br><span class="line">     - <span class="number">17</span> * a1[<span class="number">16</span>]</span><br><span class="line">     - <span class="number">18</span> * a1[<span class="number">17</span>]</span><br><span class="line">     + <span class="number">15</span> * a1[<span class="number">14</span>] * <span class="number">14</span> * a1[<span class="number">13</span>]</span><br><span class="line">     + <span class="number">13</span> * a1[<span class="number">12</span>]</span><br><span class="line">     + <span class="number">11</span> * a1[<span class="number">10</span>] * <span class="number">10</span> * a1[<span class="number">9</span>]</span><br><span class="line">     - <span class="number">12</span> * a1[<span class="number">11</span>]</span><br><span class="line">     + <span class="number">7</span> * a1[<span class="number">6</span>]</span><br><span class="line">     + (<span class="number">4</span> * a1[<span class="number">3</span>] - <span class="number">5</span> * a1[<span class="number">4</span>] - <span class="number">30</span> * a1[<span class="number">5</span>]) * <span class="number">3</span> * a1[<span class="number">2</span>]</span><br><span class="line">     + a1[<span class="number">0</span>]</span><br><span class="line">     + <span class="number">2</span> * a1[<span class="number">1</span>]</span><br><span class="line">     + <span class="number">8</span> * a1[<span class="number">7</span>]</span><br><span class="line">     - <span class="number">9</span> * a1[<span class="number">8</span>] == <span class="number">6191333</span></span><br><span class="line">)</span><br><span class="line">s.add(</span><br><span class="line"><span class="number">14</span> * a1[<span class="number">13</span>]</span><br><span class="line">     + <span class="number">10</span> * a1[<span class="number">9</span>] * <span class="number">9</span> * a1[<span class="number">8</span>] * <span class="number">8</span> * a1[<span class="number">7</span>]</span><br><span class="line">     + <span class="number">5</span> * a1[<span class="number">4</span>]</span><br><span class="line">     + <span class="number">4</span> * a1[<span class="number">3</span>] * <span class="number">3</span> * a1[<span class="number">2</span>]</span><br><span class="line">     + <span class="number">2</span> * a1[<span class="number">1</span>] * a1[<span class="number">0</span>]</span><br><span class="line">     - <span class="number">7</span> * a1[<span class="number">6</span>] * <span class="number">30</span> * a1[<span class="number">5</span>]</span><br><span class="line">     - <span class="number">11</span> * a1[<span class="number">10</span>]</span><br><span class="line">     - <span class="number">13</span> * a1[<span class="number">12</span>] * <span class="number">12</span> * a1[<span class="number">11</span>]</span><br><span class="line">     - <span class="number">16</span> * a1[<span class="number">15</span>] * <span class="number">15</span> * a1[<span class="number">14</span>]</span><br><span class="line">     - <span class="number">18</span> * a1[<span class="number">17</span>] * <span class="number">17</span> * a1[<span class="number">16</span>]</span><br><span class="line">     - <span class="number">20</span> * a1[<span class="number">19</span>] * <span class="number">19</span> * a1[<span class="number">18</span>] == <span class="number">890415359</span></span><br><span class="line">)</span><br><span class="line">s.add(</span><br><span class="line"><span class="number">20</span> * a1[<span class="number">19</span>]</span><br><span class="line">     + <span class="number">19</span> * a1[<span class="number">18</span>]</span><br><span class="line">     + <span class="number">18</span> * a1[<span class="number">17</span>]</span><br><span class="line">     + <span class="number">16</span> * a1[<span class="number">15</span>]</span><br><span class="line">     - <span class="number">17</span> * a1[<span class="number">16</span>]</span><br><span class="line">     + <span class="number">12</span> * a1[<span class="number">11</span>]</span><br><span class="line">     + <span class="number">11</span> * a1[<span class="number">10</span>]</span><br><span class="line">     + <span class="number">10</span> * a1[<span class="number">9</span>]</span><br><span class="line">     + <span class="number">9</span> * a1[<span class="number">8</span>]</span><br><span class="line">     + <span class="number">30</span> * a1[<span class="number">5</span>]</span><br><span class="line">     + a1[<span class="number">0</span>]</span><br><span class="line">     + <span class="number">4</span> * a1[<span class="number">3</span>] * <span class="number">3</span> * a1[<span class="number">2</span>] * <span class="number">2</span> * a1[<span class="number">1</span>]</span><br><span class="line">     - <span class="number">5</span> * a1[<span class="number">4</span>]</span><br><span class="line">     - <span class="number">7</span> * a1[<span class="number">6</span>]</span><br><span class="line">     + <span class="number">8</span> * a1[<span class="number">7</span>]</span><br><span class="line">     - <span class="number">13</span> * a1[<span class="number">12</span>]</span><br><span class="line">     - <span class="number">14</span> * a1[<span class="number">13</span>]</span><br><span class="line">     - <span class="number">15</span> * a1[<span class="number">14</span>] == <span class="number">23493664</span></span><br><span class="line">)</span><br><span class="line">s.add(</span><br><span class="line"><span class="number">20</span> * a1[<span class="number">19</span>] * <span class="number">19</span> * a1[<span class="number">18</span>]</span><br><span class="line">     + <span class="number">13</span> * a1[<span class="number">12</span>]</span><br><span class="line">     + <span class="number">12</span> * a1[<span class="number">11</span>]</span><br><span class="line">     + <span class="number">10</span> * a1[<span class="number">9</span>]</span><br><span class="line">     + <span class="number">3</span> * a1[<span class="number">2</span>] * <span class="number">2</span> * a1[<span class="number">1</span>]</span><br><span class="line">     + a1[<span class="number">0</span>]</span><br><span class="line">     - <span class="number">4</span> * a1[<span class="number">3</span>]</span><br><span class="line">     - <span class="number">5</span> * a1[<span class="number">4</span>]</span><br><span class="line">     + <span class="number">8</span> * a1[<span class="number">7</span>] * <span class="number">7</span> * a1[<span class="number">6</span>] * <span class="number">30</span> * a1[<span class="number">5</span>]</span><br><span class="line">     - <span class="number">9</span> * a1[<span class="number">8</span>]</span><br><span class="line">     - <span class="number">11</span> * a1[<span class="number">10</span>]</span><br><span class="line">     - <span class="number">14</span> * a1[<span class="number">13</span>]</span><br><span class="line">     - <span class="number">16</span> * a1[<span class="number">15</span>] * <span class="number">15</span> * a1[<span class="number">14</span>]</span><br><span class="line">     - <span class="number">17</span> * a1[<span class="number">16</span>]</span><br><span class="line">     - <span class="number">18</span> * a1[<span class="number">17</span>] == <span class="number">1967260144</span></span><br><span class="line">)</span><br><span class="line"><span class="built_in">print</span>(s.check())</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> a1:</span><br><span class="line">    <span class="built_in">print</span>(s.model()[i].as_long(), end=<span class="string">&quot;,&quot;</span>)</span><br><span class="line"><span class="comment">#跑出来的结果是[104,97,104,97,104,97,116,104,105,115,105,115,102,97,99,107,102,108,97,103]</span></span><br></pre></td></tr></table></figure><p>得到参数，写脚本得到flag</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;windows.h&gt;</span></span></span><br><span class="line"></span><br><span class="line">DWORD <span class="title function_">Get_254D0</span><span class="params">(DWORD d254D0[<span class="number">20</span>])</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line">DWORD d25050[<span class="number">20</span>] = &#123;<span class="number">0X1207</span>,<span class="number">0X4CA0</span>,<span class="number">0X4F21</span>,<span class="number">0X39</span>,<span class="number">0X1A523</span>,<span class="number">0X23A</span>,<span class="number">0X926</span>,<span class="number">0X4CA7</span>,</span><br><span class="line"><span class="number">0X6560</span>,<span class="number">0X36</span>,<span class="number">0X1A99B</span>,<span class="number">0X4CA8</span>,<span class="number">0X1BBE0</span>,<span class="number">0X3705</span>,<span class="number">0X926</span>,<span class="number">0X77D3</span>,</span><br><span class="line"><span class="number">0X9A98</span>,<span class="number">0X657B</span>,<span class="number">0X18</span>,<span class="number">0X0B11</span>&#125;;</span><br><span class="line"><span class="keyword">for</span>( i ; i &lt; <span class="number">20</span> ; i++)</span><br><span class="line">&#123;</span><br><span class="line">d254D0[i] = d25050[i];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">DWORD <span class="title function_">Get_25520</span><span class="params">(DWORD d25520[<span class="number">20</span>], DWORD d254D0[<span class="number">20</span>],DWORD a[<span class="number">20</span>])</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> ( <span class="type">int</span> i = <span class="number">0</span>; ; ++i )</span><br><span class="line">  &#123;</span><br><span class="line">   <span class="type">int</span> v2 = i;</span><br><span class="line">    <span class="keyword">if</span> ( v2 &gt;= <span class="number">20</span> )</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">   <span class="type">int</span> v3 = i;</span><br><span class="line">    d25520[v3] = *(a + <span class="number">20</span> - i - <span class="number">1</span>) ^ d254D0[i]; </span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">DWORD <span class="title function_">sub_1124E</span><span class="params">(DWORD a1, DWORD a2)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> v3; </span><br><span class="line">  v3 = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">while</span> ( a2 )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( (a2 &amp; <span class="number">1</span>) != <span class="number">0</span> )</span><br><span class="line">      v3 *= a1;</span><br><span class="line">    a1 = a1 * a1 % <span class="number">1000</span>;</span><br><span class="line">    a2 &gt;&gt;= <span class="number">2</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> v3;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">DWORD a[<span class="number">20</span>] = &#123;<span class="number">104</span>,<span class="number">97</span>,<span class="number">104</span>,<span class="number">97</span>,<span class="number">104</span>,<span class="number">97</span>,<span class="number">116</span>,<span class="number">104</span>,<span class="number">105</span>,<span class="number">115</span>,<span class="number">105</span>,<span class="number">115</span>,<span class="number">102</span>,<span class="number">97</span>,<span class="number">99</span>,<span class="number">107</span>,<span class="number">102</span>,<span class="number">108</span>,<span class="number">97</span>,<span class="number">103</span>&#125;;</span><br><span class="line">DWORD d254D0[<span class="number">20</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">DWORD d25520[<span class="number">20</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">DWORD d25000[<span class="number">20</span>] = &#123; <span class="number">0x07</span>, <span class="number">0x07</span>, <span class="number">0x07</span>, <span class="number">0x09</span>, <span class="number">0x05</span>, <span class="number">0x06</span>, <span class="number">0x07</span>, <span class="number">0x07</span>, <span class="number">0x07</span>, </span><br><span class="line"> <span class="number">0x09</span>, <span class="number">0x07</span>, <span class="number">0x07</span>, <span class="number">0x05</span>, <span class="number">0x07</span>, <span class="number">0x07</span>, <span class="number">0x07</span>, <span class="number">0x05</span>, <span class="number">0x07</span>,</span><br><span class="line"> <span class="number">0x09</span>, <span class="number">0x07</span>&#125;;</span><br><span class="line">DWORD Str[<span class="number">20</span>];</span><br><span class="line">DWORD v3;</span><br><span class="line"></span><br><span class="line">Get_254D0(d254D0);</span><br><span class="line">Get_25520(d25520,d254D0,a);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//这里用的是爆破的方法</span></span><br><span class="line"><span class="keyword">for</span>(DWORD p = <span class="number">0</span> ; p &lt; <span class="number">20</span> ; p++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>( DWORD k = <span class="number">0</span> ; k &lt; <span class="number">127</span> ; k++)</span><br><span class="line">&#123;</span><br><span class="line">Str[p] = k;</span><br><span class="line"><span class="keyword">if</span>( d25520[p] == sub_1124E(Str[p], d25000[p]) )</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>,k);</span><br><span class="line"><span class="keyword">break</span>; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//T1e_z3_1s_v1r9_3asy!</span></span><br></pre></td></tr></table></figure><h2 id="base64">base64</h2><p>ida64打开，一眼看去像是base64编码格式的字符串，但直接base64解码显然不行</p><p><img src="5.png" /></p><p>题目提示需要修复base64编码，还需要运行linux命令</p><p>但幸运的事发生了！</p><p>做re题的习惯性做法，先查看字符串列表，直接发现了...</p><p><img src="4.png" /></p><p>这个就是base64替换的新表，上脚本，运行得到flag</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"></span><br><span class="line">str1 = <span class="string">&quot;ZXFWtmKgDZCyrmC5B+CiVfsyXUCQVfsyZRFzDU4yX2YCD/F5Ih8=&quot;</span></span><br><span class="line"></span><br><span class="line">string1 = <span class="string">&quot;QWERTYUIOPASDFGHJKLZXCVBNMqwertyuiopasdfghjklzxcvbn/+m1234567890&quot;</span></span><br><span class="line">string2 = <span class="string">&quot;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(base64.b64decode(str1.translate(<span class="built_in">str</span>.maketrans(string1,string2))))</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="A.png" /></p><h2 id="odscript">odscript</h2><p>查壳，32位无壳，运行一下发现是弹窗输入注册码，随便输提示有错误，<del>然后再读读曹操身边的故事</del></p><p>输入注册码，显示结果都是以弹窗的形式，可以尝试去寻找Messagebox函数</p><p>ida打开，发现sub_4016E0和sub_401720中都有调用Messagebox函数</p><p><img src="QQ图片20231025202407.png" /></p><p>可以合理猜测是两个结果的弹窗，一个是显示正确，一个是显示错误</p><p>在x32dbg里这两处都下断点，随机输入注册码，发现程序停在sub_401720处，无弹窗，再F9出现错误弹窗，确定想法是对的</p><p>于是看sub_4016E0，通过IDA交叉引用看到，.text:00401617引用了该函数</p><p>来到.text:00401617</p><p><img src="QQ截图20231025205445.png" /></p><p>看到一些关键函数</p><p><img src="QQ截图20231025205708.png" /></p><p>跟进，发现是正是sub_401630调用了CString::CString函数</p><p><img src="QQ截图20231025210102.png" /></p><p>阅读代码，大致意思是判断a2指向的一段内存和this指向的一段内存是否相等</p><p>那么调试时停在sub_401630处F7单步即可查看里面的内容</p><p>那么问题来了</p><p>上面试过，随便输的注册码，即使在sub_401630处添加了断点，F9也是停在sub_401720处</p><p>说明上方还有跳转，直接跳过sub_401630起的正确弹窗区域，跳到sub_401720错误弹窗去了</p><p>向上查看，果然有问题</p><p><img src="QQ截图20231025212258.png" /></p><p>阅读最上面红框内容，知道需要满足输入的字符串长度为0x21，即33个字符</p><p>得到以上信息，就可以开始调试了，x32dbg打开</p><p>在00401630处设置断点，F9，输入随机的长度为33字符的字符串</p><p>程序停在00401630处，F7单步步入，跳转比较函数后发现flag</p><p><img src="QQ截图20231025213613.png" /></p><p><img src="QQ截图20231025213750.png" /></p><p>（或者我写wp的时候才发现00401666处已经有了</p>]]></content>
      
      
      <categories>
          
          <category> WP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> WP </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
